{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/codes/worker/start.ts","webpack:///./src/codes/worker/keystore/index.ts","webpack:///./src/codes/worker/keystore/instance.ts","webpack:///./src/codes/worker/keystore/utils_logic.ts","webpack:///./src/codes/worker/index.ts","webpack:///./src/codes/worker/business/idb_helper.ts","webpack:///./src/codes/worker/enums.ts","webpack:///./src/codes/worker/business/drop_db.ts","webpack:///./src/codes/worker/log_helper.ts","webpack:///./src/codes/worker/config.ts","webpack:///./src/codes/worker/keystore/query_executor.ts","webpack:///./src/codes/worker/keystore/enums.ts","webpack:///./src/codes/worker/keystore/business/main_logic.ts","webpack:///./src/codes/worker/keystore/business/remove_logic.ts","webpack:///./src/codes/worker/keystore/business/base_logic.ts","webpack:///./src/codes/worker/keystore/business/idb_helper.ts","webpack:///./src/codes/worker/keystore/business/set_logic.ts","webpack:///./src/codes/worker/keystore/business/init_db_logic.ts","webpack:///./src/codes/worker/keystore/business/get_logic.ts","webpack:///./src/codes/worker/query_executor.ts","webpack:///./src/codes/worker/business/open_db.ts","webpack:///./src/codes/worker/model/db_helper.ts","webpack:///./src/codes/worker/model/table_helper.ts","webpack:///./src/codes/worker/business/create_db.ts","webpack:///./src/codes/worker/model/database.ts","webpack:///./src/codes/worker/model/table.ts","webpack:///./src/codes/worker/model/column.ts","webpack:///./src/codes/worker/business/select/index.ts","webpack:///./src/codes/worker/business/select/instance.ts","webpack:///./src/codes/worker/business/select/helper.ts","webpack:///./src/codes/worker/business/select/group_by_helper.ts","webpack:///./src/codes/worker/business/select/where.ts","webpack:///./src/codes/worker/business/select/like.ts","webpack:///./src/codes/worker/business/select/in.ts","webpack:///./src/codes/worker/business/select/not_where.ts","webpack:///./src/codes/worker/business/select/base_select.ts","webpack:///./src/codes/worker/business/base.ts","webpack:///./src/codes/worker/business/base_helper.ts","webpack:///./src/codes/worker/util.ts","webpack:///./src/codes/worker/business/where_checker.ts","webpack:///./src/codes/worker/business/select/join.ts","webpack:///./src/codes/worker/business/count/index.ts","webpack:///./src/codes/worker/business/count/instance.ts","webpack:///./src/codes/worker/business/count/where.ts","webpack:///./src/codes/worker/business/count/like.ts","webpack:///./src/codes/worker/business/count/in.ts","webpack:///./src/codes/worker/business/count/not_where.ts","webpack:///./src/codes/worker/business/count/base_count.ts","webpack:///./src/codes/worker/business/insert/index.ts","webpack:///./src/codes/worker/business/insert/instance.ts","webpack:///./src/codes/worker/business/insert/values_checker.ts","webpack:///./src/codes/worker/business/insert/value_checker.ts","webpack:///./src/codes/worker/business/remove/index.ts","webpack:///./src/codes/worker/business/remove/instance.ts","webpack:///./src/codes/worker/business/remove/where.ts","webpack:///./src/codes/worker/business/remove/like.ts","webpack:///./src/codes/worker/business/remove/in.ts","webpack:///./src/codes/worker/business/remove/not_where.ts","webpack:///./src/codes/worker/business/remove/base_remove.ts","webpack:///./src/codes/worker/business/update/index.ts","webpack:///./src/codes/worker/business/update/instance.ts","webpack:///./src/codes/worker/business/update/where.ts","webpack:///./src/codes/worker/business/update/base_update.ts","webpack:///./src/codes/worker/business/update/like.ts","webpack:///./src/codes/worker/business/update/in.ts","webpack:///./src/codes/worker/business/update/not_where.ts","webpack:///./src/codes/worker/business/update/schema_checker.ts","webpack:///./src/codes/worker/business/clear.ts","webpack:///./src/codes/worker/business/bulk_insert.ts"],"names":[],"mappings":"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","file":"jsstore.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as KeyStore from \"./keystore/index\";\r\nimport { LogHelper } from \"./log_helper\";\r\nimport { QueryExecutor } from \"./query_executor\";\r\nconst log = (value) => {\r\n    LogHelper.log(value);\r\n};\r\nexport const registerEvents = () => {\r\n    (self as DedicatedWorkerGlobalScope).onmessage = (e) => {\r\n        log(\"Request executing from WebWorker, request name: \" + e.data.Name);\r\n        new QueryExecutor().checkConnectionAndExecuteLogic(e.data);\r\n    };\r\n};\r\nregisterEvents();\r\nKeyStore.init();","export * from './instance';","import { Utils } from \"./utils_logic\";\r\nimport { QueryExecutor } from './query_executor';\r\nimport { IQueryRequest, IError, IInsert } from \"./interfaces\";\r\n\r\n/**\r\n * Initialize KeyStore\r\n * \r\n */\r\nexport const init = () => {\r\n    Utils.setDbType();\r\n    if (indexedDB) {\r\n        QueryExecutor.prcoessQuery({\r\n            Name: 'create_db',\r\n            Query: null\r\n        } as IQueryRequest);\r\n    }\r\n};\r\n\r\n/**\r\n * return the value by key\r\n * \r\n * @param {string} key \r\n * @param {(result) => void} onSuccess \r\n * @param {(err: IError) => void} [onError=null] \r\n * @returns \r\n */\r\nexport const get = (key: string, onSuccess: (result) => void, onError: (err: IError) => void = null) => {\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'get',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: key\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * insert or update value\r\n * \r\n * @param {any} key \r\n * @param {any} value \r\n * @param {(result) => void} [onSuccess] \r\n * @param {(err: IError) => void} [onError] \r\n * @returns \r\n */\r\nexport const set = (key, value, onSuccess?: (result) => void, onError?: (err: IError) => void) => {\r\n    const query = {\r\n        Key: key,\r\n        Value: value\r\n    } as IInsert;\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'set',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: query\r\n    } as IQueryRequest);\r\n    return this;\r\n};\r\n\r\n/**\r\n * delete value\r\n * \r\n * @param {string} key \r\n * @param {(result) => void} [onSuccess=null] \r\n * @param {(err: IError) => void} [onError=null] \r\n * @returns \r\n */\r\nexport const remove = (key: string, onSuccess: (result) => void = null, onError: (err: IError) => void = null) => {\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'remove',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: key\r\n    } as IQueryRequest);\r\n    return this;\r\n};\r\n","import * as JsStore from '../index';\r\nimport { CONNECTION_STATUS } from './enums';\r\nimport { QueryExecutor } from './query_executor';\r\n\r\nexport class Utils {\r\n    /**\r\n     * determine and set the DataBase Type\r\n     * \r\n     * \r\n     * @memberOf UtilityLogic\r\n     */\r\n    static setDbType() {\r\n        if (!indexedDB) {\r\n            indexedDB = (self as any).mozIndexedDB ||\r\n                (self as any).webkitIndexedDB || (self as any).msIndexedDB;\r\n        }\r\n        if (indexedDB) {\r\n            IDBTransaction = IDBTransaction ||\r\n                (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\r\n            (self as any).IDBKeyRange = (self as any).IDBKeyRange ||\r\n                (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange;\r\n        }\r\n        else {\r\n            JsStore.IdbHelper.dbStatus = {\r\n                conStatus: JsStore.CONNECTION_STATUS.UnableToStart,\r\n                lastError: JsStore.ERROR_TYPE.IndexedDbUndefined\r\n            };\r\n        }\r\n    }\r\n\r\n    static updateDbStatus(status: CONNECTION_STATUS, err?: JsStore.ERROR_TYPE) {\r\n        if (err === undefined) {\r\n            QueryExecutor.dbStatus.conStatus = status;\r\n        }\r\n        else {\r\n            QueryExecutor.dbStatus = {\r\n                conStatus: status,\r\n                lastError: err\r\n            };\r\n        }\r\n    }\r\n}\r\n","export * from './business/idb_helper';\r\nexport * from './enums';\r\nexport * from './start';","import { CONNECTION_STATUS, ERROR_TYPE, IDB_MODE } from \"../enums\";\r\nimport * as KeyStore from \"../keystore/index\";\r\nimport { IDbStatus, ITable, IDataBase } from \"../interfaces\";\r\nimport { DataBase } from \"../model/database\";\r\nimport { DropDb } from \"./drop_db\";\r\n\r\nexport class IdbHelper {\r\n\r\n    static onDbDroppedByBrowser: () => void;\r\n    static transaction: IDBTransaction = null;\r\n    static isDbDeletedByBrowser: boolean;\r\n    static dbConnection: IDBDatabase;\r\n    static activeDb: DataBase;\r\n    static activeDbVersion = 0;\r\n    static dbStatus: IDbStatus = {\r\n        conStatus: CONNECTION_STATUS.NotStarted,\r\n        lastError: null\r\n    };\r\n\r\n    static callDbDroppedByBrowser(deleteMetaData?: boolean) {\r\n        if (this.dbStatus.conStatus === CONNECTION_STATUS.Connected) {\r\n            this.isDbDeletedByBrowser = true;\r\n            if (deleteMetaData === true) {\r\n                const dropDbObject = new DropDb(this.onDbDroppedByBrowser, null);\r\n                dropDbObject.deleteMetaData();\r\n            }\r\n        }\r\n    }\r\n\r\n    static createTransaction(tableNames: string[], callBack: () => void, mode?) {\r\n        if (this.transaction === null) {\r\n            mode = mode ? mode : IDB_MODE.ReadWrite;\r\n            this.transaction = this.dbConnection.transaction(tableNames, mode);\r\n            this.transaction.oncomplete = () => {\r\n                this.transaction = null;\r\n                callBack();\r\n            };\r\n            (this.transaction as any).ontimeout = () => {\r\n                this.transaction = null;\r\n                console.error('transaction timed out');\r\n            };\r\n        }\r\n    }\r\n\r\n    static setDbList(list: string[]) {\r\n        return new Promise((resolve, reject) => {\r\n            KeyStore.set('DataBase_List', list, resolve, reject);\r\n        });\r\n\r\n    }\r\n\r\n    static updateDbStatus(status: CONNECTION_STATUS, err?: ERROR_TYPE) {\r\n        if (err === undefined) {\r\n            this.dbStatus.conStatus = status;\r\n        }\r\n        else {\r\n            this.dbStatus = {\r\n                conStatus: status,\r\n                lastError: err\r\n            };\r\n        }\r\n    }\r\n\r\n    static getDbList(callback: (dbList: string[]) => void) {\r\n        KeyStore.get('DataBase_List', (result) => {\r\n            result = result == null ? [] : result;\r\n            callback(result);\r\n        });\r\n    }\r\n\r\n    static getDbVersion(dbName: string, callback: (version: number) => void) {\r\n        KeyStore.get(`JsStore_${dbName}_Db_Version`, function (dbVersion) {\r\n            callback.call(this, Number(dbVersion));\r\n        }.bind(this));\r\n    }\r\n\r\n    static getDbSchema(dbName: string, callback: (schema: IDataBase) => void) {\r\n        KeyStore.get(`JsStore_${dbName}_Schema`, (result) => {\r\n            callback(result);\r\n        });\r\n    }\r\n}","export enum OCCURENCE {\r\n    First = 'f',\r\n    Last = 'l',\r\n    Any = 'a'\r\n}\r\n\r\nexport enum WEBWORKER_STATUS {\r\n    Registered = \"registerd\",\r\n    Failed = \"failed\",\r\n    NotStarted = \"not_started\"\r\n}\r\n\r\nexport enum CONNECTION_STATUS {\r\n    Connected = \"connected\",\r\n    Closed = \"closed\",\r\n    NotStarted = \"not_started\",\r\n    UnableToStart = \"unable_to_start\",\r\n    ClosedByJsStore = \"closed_by_jsstore\"\r\n}\r\n\r\nexport enum DATA_TYPE {\r\n    String = \"string\",\r\n    Object = \"object\",\r\n    Array = \"array\",\r\n    Number = \"number\",\r\n    Boolean = \"boolean\",\r\n    Null = \"null\",\r\n    DateTime = \"date_time\"\r\n}\r\n\r\nexport enum ERROR_TYPE {\r\n    UndefinedColumn = \"undefined_column\",\r\n    UndefinedValue = \"undefined_value\",\r\n    UndefinedColumnName = \"undefined_column_name\",\r\n    UndefinedDbName = \"undefined_database_name\",\r\n    UndefinedColumnValue = \"undefined_column_value\",\r\n    NotArray = \"not_array\",\r\n    NoValueSupplied = \"no_value_supplied\",\r\n    ColumnNotExist = \"column_not_exist\",\r\n    EnableSearchOff = \"enable_search_off\",\r\n    InvalidOp = \"invalid_operator\",\r\n    NullValue = \"null_value\",\r\n    BadDataType = \"bad_data_type\",\r\n    NextJoinNotExist = \"next_join_not_exist\",\r\n    TableNotExist = \"table_not_exist\",\r\n    DbNotExist = \"db_not_exist\",\r\n    ConnectionAborted = \"connection_aborted\",\r\n    ConnectionClosed = \"connection_closed\",\r\n    NotObject = \"not_object\",\r\n    InvalidConfig = \"invalid_config\",\r\n    DbBlocked = \"Db_blocked\",\r\n    IndexedDbUndefined = \"indexeddb_undefined\",\r\n    IndexedDbBlocked = \"indexeddb_blocked\",\r\n}\r\n\r\nexport enum QUERY_OPTION {\r\n    Where = \"where\",\r\n    Like = 'like',\r\n    In = 'in',\r\n    Between = '-',\r\n    GreaterThan = '>',\r\n    LessThan = '<',\r\n    GreaterThanEqualTo = \">=\",\r\n    LessThanEqualTo = \"<=\",\r\n    NotEqualTo = \"!=\",\r\n    Aggregate = \"aggregate\",\r\n    Max = \"max\",\r\n    Min = \"min\",\r\n    Avg = \"avg\",\r\n    Count = \"count\",\r\n    Sum = \"sum\",\r\n    Or = \"or\",\r\n    Skip = \"skip\",\r\n    Limit = \"limit\",\r\n    And = \"and\"\r\n}\r\n\r\nexport enum IDB_MODE {\r\n    ReadOnly = \"readonly\",\r\n    ReadWrite = \"readwrite\"\r\n}\r\n\r\nexport enum API {\r\n    CreateDb = \"create_db\",\r\n    IsDbExist = \"is_db_exist\",\r\n    GetDbVersion = \"get_db_version\",\r\n    GetDbList = \"get_db_list\",\r\n    Get = \"get\",\r\n    Set = \"set\",\r\n    Select = \"select\",\r\n    Insert = \"insert\",\r\n    Update = \"update\",\r\n    Remove = \"remove\",\r\n    GetDbSchema = \"get_db_schema\",\r\n    OpenDb = \"open_db\",\r\n    Clear = \"clear\",\r\n    DropDb = \"drop_db\",\r\n    Count = \"count\",\r\n    BulkInsert = \"bulk_insert\",\r\n    ExportJson = \"export_json\",\r\n    ChangeLogStatus = \"change_log_status\"\r\n}","import { IError } from \"../interfaces\";\r\nimport * as KeyStore from \"../keystore/index\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { Table } from \"../model/table\";\r\nimport { Column } from \"../model/column\";\r\nimport { CONNECTION_STATUS, ERROR_TYPE } from \"../enums\";\r\nimport { LogHelper } from \"../log_helper\";\r\n\r\nexport class DropDb {\r\n    private onSuccess_: () => void;\r\n    private onError_: (err: IError) => void;\r\n\r\n    private get dbName_() {\r\n        return IdbHelper.activeDb.name;\r\n    }\r\n\r\n    constructor(onSuccess: () => void, onError: (err: IError) => void) {\r\n        this.onSuccess_ = onSuccess;\r\n        this.onError_ = onError;\r\n    }\r\n\r\n    deleteMetaData() {\r\n        KeyStore.remove(`JsStore_${this.dbName_}_Db_Version`);\r\n        IdbHelper.activeDb.tables.forEach((table: Table) => {\r\n            KeyStore.remove(`JsStore_${this.dbName_}_${table.name}_Version`);\r\n            table.columns.forEach((column: Column) => {\r\n                if (column.autoIncrement) {\r\n                    KeyStore.remove(`JsStore_${this.dbName_}_${table.name}_${column.name}_Value`);\r\n                }\r\n            });\r\n        });\r\n        // remove from database_list \r\n        this.getDbList_(result => {\r\n            result.splice(result.indexOf(this.dbName_), 1);\r\n            IdbHelper.setDbList(result).then(() => {\r\n                // remove db schema from keystore\r\n                KeyStore.remove(`JsStore_${this.dbName_}_Schema`, this.onSuccess_);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    private getDbList_(callback: (dbList: string[]) => void) {\r\n        IdbHelper.getDbList(callback);\r\n    }\r\n\r\n    deleteDb() {\r\n        setTimeout(() => {\r\n            const dropDbRequest = indexedDB.deleteDatabase(this.dbName_);\r\n            dropDbRequest.onblocked = () => {\r\n                if (this.onError_ != null) {\r\n                    this.onError_(new LogHelper(ERROR_TYPE.DbBlocked).get());\r\n                }\r\n            };\r\n            dropDbRequest.onerror = (e) => {\r\n                if (this.onError_ != null) {\r\n                    this.onError_((event as any).target.error);\r\n                }\r\n            };\r\n            dropDbRequest.onsuccess = () => {\r\n                IdbHelper.dbStatus.conStatus = CONNECTION_STATUS.Closed;\r\n                this.deleteMetaData();\r\n            };\r\n        }, 100);\r\n    }\r\n}\r\n","import { IError } from \"./interfaces\";\r\nimport { ERROR_TYPE } from \"./enums\";\r\nimport { Config } from \"./config\";\r\n\r\nexport class LogHelper implements IError {\r\n    type: ERROR_TYPE;\r\n    message: string;\r\n    private info_: any;\r\n\r\n    constructor(type: ERROR_TYPE, info: any = null) {\r\n        this.type = type;\r\n        this.info_ = info;\r\n        this.message = this.getMsg_();\r\n    }\r\n\r\n    throw() {\r\n        throw this.get();\r\n    }\r\n\r\n    static log(msg) {\r\n        if (Config.isLogEnabled) {\r\n            console.log(msg);\r\n        }\r\n    }\r\n\r\n    logError() {\r\n        console.error(this.get());\r\n    }\r\n\r\n    logWarning() {\r\n        console.warn(this.get());\r\n    }\r\n\r\n    get() {\r\n        return {\r\n            message: this.message,\r\n            type: this.type\r\n        } as IError;\r\n    }\r\n\r\n    private getMsg_() {\r\n        let errMsg: string;\r\n        switch (this.type) {\r\n            case ERROR_TYPE.NotArray:\r\n                errMsg = \"Supplied value is not an array\";\r\n                break;\r\n            case ERROR_TYPE.UndefinedColumn:\r\n                errMsg = \"Column is undefined in Where\";\r\n                break;\r\n            case ERROR_TYPE.UndefinedValue:\r\n                errMsg = \"Value is undefined in Where\";\r\n                break;\r\n            case ERROR_TYPE.UndefinedColumnName:\r\n                errMsg = \"Column name is undefined '\" + this.info_['TableName'] + \"'\";\r\n                break;\r\n            case ERROR_TYPE.UndefinedDbName:\r\n                errMsg = \"Database name is not supplied\";\r\n                break;\r\n            case ERROR_TYPE.UndefinedColumnValue:\r\n                errMsg = \"Column value is undefined\";\r\n                break;\r\n            case ERROR_TYPE.NoValueSupplied:\r\n                errMsg = \"No value supplied\";\r\n                break;\r\n            case ERROR_TYPE.InvalidOp:\r\n                errMsg = \"Invalid Op Value '\" + this.info_['Op'] + \"'\";\r\n                break;\r\n            case ERROR_TYPE.ColumnNotExist:\r\n                errMsg = \"Column '\" + this.info_['ColumnName'] + \"' does not exist\";\r\n                break;\r\n            case ERROR_TYPE.EnableSearchOff:\r\n                errMsg = \"Search is turned off for the Column '\" + this.info_['ColumnName'] + \"'\";\r\n                break;\r\n            case ERROR_TYPE.NullValue:\r\n                errMsg = \"Null value is not allowed for column '\" + this.info_['ColumnName'] + \"'\";\r\n                break;\r\n            case ERROR_TYPE.BadDataType:\r\n                errMsg = \"Supplied value for column '\" + this.info_['ColumnName'] +\r\n                    \"' does not have valid type\";\r\n                break;\r\n            case ERROR_TYPE.NextJoinNotExist: errMsg = \"Next join details not supplied\";\r\n                break;\r\n            case ERROR_TYPE.TableNotExist:\r\n                errMsg = \"Table '\" + this.info_['TableName'] + \"' does not exist\";\r\n                break;\r\n            case ERROR_TYPE.DbNotExist:\r\n                errMsg = \"Database '\" + this.info_['DbName'] + \"' does not exist\";\r\n                break;\r\n            case ERROR_TYPE.NotObject:\r\n                errMsg = \"supplied value is not object\";\r\n                break;\r\n            case ERROR_TYPE.InvalidOp:\r\n                errMsg = \"Invalid Config '\" + this.info_['Config'] + \" '\";\r\n            case ERROR_TYPE.DbBlocked:\r\n                errMsg = `database is blocked, cant be deleted right now`;\r\n            default:\r\n                errMsg = this.message;\r\n                break;\r\n        }\r\n        return errMsg;\r\n    }\r\n}","export class Config {\r\n    static isLogEnabled = false;\r\n}","import { IDbStatus, IQueryResult, IQueryRequest } from \"./interfaces\";\r\nimport { CONNECTION_STATUS } from \"./enums\";\r\nimport { Main } from \"./business/main_logic\";\r\n\r\nexport class QueryExecutor {\r\n    static requestQueue: IQueryRequest[] = [];\r\n    static tableName = \"LocalStore\";\r\n    static columnName = \"Key\";\r\n    static isCodeExecuting = false;\r\n    static dbStatus: IDbStatus = {\r\n        conStatus: CONNECTION_STATUS.NotStarted,\r\n        lastError: \"\"\r\n    };\r\n\r\n    static prcoessQuery(request: IQueryRequest) {\r\n        this.requestQueue.push(request);\r\n        if (this.requestQueue.length === 1) {\r\n            this.executeCode();\r\n        }\r\n    }\r\n\r\n    static executeCode() {\r\n        if (!this.isCodeExecuting && this.requestQueue.length > 0) {\r\n            this.isCodeExecuting = true;\r\n            const request: IQueryRequest = {\r\n                Name: this.requestQueue[0].Name,\r\n                Query: this.requestQueue[0].Query\r\n            } as IQueryRequest;\r\n            new Main(results => {\r\n                this.onQueryFinished(results);\r\n            }).checkConnectionAndExecuteLogic(request);\r\n        }\r\n    }\r\n\r\n    static onQueryFinished(message: IQueryResult) {\r\n        const finishedRequest: IQueryRequest = this.requestQueue.shift();\r\n        this.isCodeExecuting = false;\r\n        if (message.ErrorOccured) {\r\n            if (finishedRequest.OnError) {\r\n                finishedRequest.OnError(message.ErrorDetails);\r\n            }\r\n            else {\r\n                console.error(message.ErrorDetails);\r\n            }\r\n        }\r\n        else if (finishedRequest.OnSuccess) {\r\n            finishedRequest.OnSuccess(message.ReturnedValue);\r\n        }\r\n        this.executeCode();\r\n    }\r\n}\r\n","export enum CONNECTION_STATUS {\r\n    Connected = \"connected\",\r\n    Closed = \"closed\",\r\n    NotStarted = \"not_connected\"\r\n}","import { QueryExecutor } from '../query_executor';\r\nimport { CONNECTION_STATUS } from \"../enums\";\r\nimport { IInsert, IError, IQueryRequest, IQueryResult } from \"../interfaces\";\r\nimport { Remove } from \"./remove_logic\";\r\nimport { Set } from \"./set_logic\";\r\nimport { InitDb } from \"./init_db_logic\";\r\nimport { Get } from \"./get_logic\";\r\nimport { IdbHelper } from './idb_helper';\r\n\r\nexport class Main {\r\n    onSuccess: (result) => void;\r\n    constructor(onSuccess = null) {\r\n        this.onSuccess = onSuccess;\r\n    }\r\n\r\n    set(query: IInsert, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        const insertInstance = new Set(query, onSuccess, onError);\r\n        insertInstance.execute();\r\n    }\r\n\r\n    remove(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        const deleteInstance = new Remove(key, onSuccess, onError);\r\n        deleteInstance.execute();\r\n    }\r\n\r\n    get(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        const getInstance = new Get(key, onSuccess, onError);\r\n        getInstance.execute();\r\n    }\r\n\r\n    createDb(onSuccess: () => void, onError: (err: IError) => void) {\r\n        const dbName = \"KeyStore\";\r\n        const initDbInstance = new InitDb(dbName, onSuccess, onError);\r\n    }\r\n\r\n    checkConnectionAndExecuteLogic(request: IQueryRequest) {\r\n        if (request.Name === 'create_db' || request.Name === 'open_db') {\r\n            this.executeLogic(request);\r\n        }\r\n        else {\r\n            switch (QueryExecutor.dbStatus.conStatus) {\r\n                case CONNECTION_STATUS.Connected: this.executeLogic(request); break;\r\n                case CONNECTION_STATUS.NotStarted:\r\n                    setTimeout(function () {\r\n                        this.checkConnectionAndExecuteLogic(request);\r\n                    }.bind(this), 100); break;\r\n                case CONNECTION_STATUS.Closed:\r\n                    if (IdbHelper._isDbDeletedByBrowser) {\r\n                        this.createDb(() => {\r\n                            IdbHelper._isDbDeletedByBrowser = false;\r\n                            this.checkConnectionAndExecuteLogic(request);\r\n                        }, (err) => {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    private returnResult(result) {\r\n        if (this.onSuccess) {\r\n            this.onSuccess(result);\r\n        }\r\n    }\r\n\r\n    private executeLogic(request: IQueryRequest) {\r\n        const onSuccess = (results?) => {\r\n            this.returnResult({\r\n                ReturnedValue: results\r\n            } as IQueryResult);\r\n        };\r\n        const onError = (err) => {\r\n            this.returnResult({\r\n                ErrorDetails: err,\r\n                ErrorOccured: true\r\n            } as IQueryResult);\r\n        };\r\n\r\n        switch (request.Name) {\r\n            case 'get':\r\n                this.get(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'set': this.set(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'remove': this.remove(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'create_db': this.createDb(onSuccess, onError); break;\r\n        }\r\n    }\r\n}","import { Base } from \"./base_logic\";\r\nimport { IError } from \"../interfaces\";\r\nimport { QueryExecutor } from \"../query_executor\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\n\r\nexport class Remove extends Base {\r\n    key: string;\r\n    rowAffected = 0;\r\n    constructor(key: string, onSuccess: (recordRemoved: number) => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.key = key;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n\r\n    execute() {\r\n        this.initTransaction();\r\n        const removeData = (column, value) => {\r\n            const cursorRequest = this.objectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n            cursorRequest.onerror = (e) => {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(e);\r\n            };\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                const cursor: IDBCursorWithValue = e.target.result;\r\n                if (cursor) {\r\n                    cursor.delete();\r\n                    ++this.rowAffected;\r\n                    cursor.continue();\r\n                }\r\n            };\r\n        };\r\n\r\n        if (!this.errorOccured) {\r\n            removeData(QueryExecutor.columnName, this.key);\r\n        }\r\n    }\r\n\r\n    private initTransaction() {\r\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted.bind(this));\r\n        this.objectStore = IdbHelper._transaction.objectStore(QueryExecutor.tableName);\r\n    }\r\n\r\n    private onTransactionCompleted() {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.rowAffected);\r\n        }\r\n    }\r\n}","import { IError } from \"../interfaces\";\r\n\r\nexport class Base {\r\n    results = null;\r\n    onSuccess: (results) => void;\r\n    onError: (err: IError) => void;\r\n    errorOccured = false;\r\n    errorCount = 0;\r\n    transaction: IDBTransaction;\r\n    objectStore: IDBObjectStore;\r\n\r\n    protected onErrorOccured(e) {\r\n        ++this.errorCount;\r\n        if (this.errorCount === 1) {\r\n            if (this.onError != null) {\r\n                this.onError((e as any).target.error);\r\n            }\r\n        }\r\n        console.error(e);\r\n    }\r\n}","import { QueryExecutor } from '../query_executor';\r\nimport { CONNECTION_STATUS } from '../enums';\r\n\r\nexport class IdbHelper {\r\n    static _dbConnection;\r\n    static _isDbDeletedByBrowser: boolean;\r\n    static _transaction: IDBTransaction = null;\r\n\r\n    static callDbDroppedByBrowser() {\r\n        this._isDbDeletedByBrowser = QueryExecutor.dbStatus.conStatus === CONNECTION_STATUS.Connected ? true : false;\r\n    }\r\n\r\n    static createTransaction(tableNames, callBack: () => void, mode?) {\r\n        if (this._transaction === null) {\r\n            mode = mode ? mode : \"readwrite\";\r\n            this._transaction = this._dbConnection.transaction(tableNames, mode);\r\n            this._transaction.oncomplete = () => {\r\n                this._transaction = null;\r\n                callBack();\r\n            };\r\n            (this._transaction as any).ontimeout = function () {\r\n                this._transaction = null;\r\n                console.error('transaction timed out');\r\n            };\r\n        }\r\n    }\r\n}","import { Base } from \"./base_logic\";\r\nimport { IInsert, IError } from \"../interfaces\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { QueryExecutor } from \"../query_executor\";\r\n\r\nexport class Set extends Base {\r\n    query: IInsert;\r\n    constructor(query: IInsert, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        super();\r\n        try {\r\n            this.query = query;\r\n            this.onSuccess = onSuccess;\r\n            this.onError = onError;\r\n        }\r\n        catch (ex) {\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    execute() {\r\n        const updateIfExistElseInsert = () => {\r\n            const cursorRequest = this.objectStore.index(QueryExecutor.columnName).openCursor(\r\n                IDBKeyRange.only(this.query[QueryExecutor.columnName])\r\n            );\r\n            cursorRequest.onsuccess = (e) => {\r\n                const cursor: IDBCursorWithValue = (e as any).target.result;\r\n                if (cursor) {\r\n                    cursor.update(this.query);\r\n                }\r\n                else {\r\n                    insertData();\r\n                }\r\n            };\r\n\r\n            cursorRequest.onerror = (e) => {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(e);\r\n            };\r\n\r\n        };\r\n        const insertData = () => {\r\n            const addResult = this.objectStore.add(this.query);\r\n            addResult.onerror = (e) => {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(e);\r\n            };\r\n        };\r\n        this.initTransaction();\r\n        updateIfExistElseInsert();\r\n    }\r\n\r\n    private initTransaction() {\r\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted_);\r\n        this.objectStore = IdbHelper._transaction.objectStore(QueryExecutor.tableName);\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false && this.onSuccess) {\r\n            this.onSuccess(null);\r\n        }\r\n    }\r\n}","import { IError } from \"../interfaces\";\r\nimport * as JsStore from '../../index';\r\nimport { CONNECTION_STATUS } from \"../enums\";\r\nimport { Utils } from \"../utils_logic\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { QueryExecutor } from \"../query_executor\";\r\n\r\nexport let tempDatas;\r\nexport class InitDb {\r\n    constructor(dbName: string, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const dbRequest = self.indexedDB.open(dbName, 1);\r\n        IdbHelper._isDbDeletedByBrowser = false;\r\n        dbRequest.onerror = (event) => {\r\n            if ((event as any).target.error.name === 'InvalidStateError') {\r\n                JsStore.IdbHelper.dbStatus = {\r\n                    conStatus: JsStore.CONNECTION_STATUS.UnableToStart,\r\n                    lastError: JsStore.ERROR_TYPE.IndexedDbBlocked,\r\n                };\r\n            }\r\n            if (onError != null) {\r\n                onError((event as any).target.error);\r\n            }\r\n        };\r\n\r\n        dbRequest.onsuccess = (event) => {\r\n            QueryExecutor.dbStatus.conStatus = CONNECTION_STATUS.Connected;\r\n            IdbHelper._dbConnection = dbRequest.result;\r\n            IdbHelper._dbConnection.onclose = () => {\r\n                IdbHelper.callDbDroppedByBrowser();\r\n                Utils.updateDbStatus(CONNECTION_STATUS.Closed, JsStore.ERROR_TYPE.ConnectionClosed);\r\n            };\r\n\r\n            IdbHelper._dbConnection.onversionchange = (e) => {\r\n                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                    e.target.close(); // Manually close our connection to the db\r\n                    IdbHelper.callDbDroppedByBrowser();\r\n                    Utils.updateDbStatus(CONNECTION_STATUS.Closed, JsStore.ERROR_TYPE.ConnectionClosed);\r\n                }\r\n            };\r\n\r\n            IdbHelper._dbConnection.onerror = (e) => {\r\n                QueryExecutor.dbStatus.lastError = \"Error occured in connection :\" + e.target.result;\r\n            };\r\n\r\n            IdbHelper._dbConnection.onabort = (e) => {\r\n                QueryExecutor.dbStatus = {\r\n                    conStatus: CONNECTION_STATUS.Closed,\r\n                    lastError: \"Connection aborted\"\r\n                };\r\n            };\r\n\r\n            if (onSuccess != null) {\r\n                onSuccess();\r\n            }\r\n        };\r\n\r\n        dbRequest.onupgradeneeded = (event: any) => {\r\n            const db = event.target.result,\r\n                column = \"Key\";\r\n            db.createObjectStore(QueryExecutor.tableName, {\r\n                keyPath: column\r\n            }).createIndex(column, column, { unique: true });\r\n        };\r\n    }\r\n}","import { Base } from \"./base_logic\";\r\nimport { IError } from \"../interfaces\";\r\nimport { QueryExecutor } from \"../query_executor\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\n\r\nexport class Get extends Base {\r\n    key: string;\r\n    constructor(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.key = key;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n\r\n    execute() {\r\n        const getData = (column, value) => {\r\n            const cursorRequest = this.objectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n            cursorRequest.onerror = (e) => {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(e);\r\n            };\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                const cursor: IDBCursorWithValue = e.target.result;\r\n                if (cursor) {\r\n                    this.results = cursor.value['Value'];\r\n                }\r\n            };\r\n        };\r\n        this.initTransaction_();\r\n        getData(QueryExecutor.columnName, this.key);\r\n\r\n    }\r\n\r\n    private initTransaction_() {\r\n        IdbHelper.createTransaction([QueryExecutor.tableName], this.onTransactionCompleted_, 'readonly');\r\n        this.objectStore = IdbHelper._transaction.objectStore(QueryExecutor.tableName);\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.results);\r\n        }\r\n    }\r\n}\r\n","import { IdbHelper } from \"./business/idb_helper\";\r\nimport { LogHelper } from \"./log_helper\";\r\nimport {\r\n    ITranscationQry, IError, IUpdate,\r\n    IInsert, IRemove, IDataBase, ISelect, ISelectJoin, IDbInfo, ITable, ICount, ISet\r\n} from \"./interfaces\";\r\nimport { CONNECTION_STATUS, ERROR_TYPE, DATA_TYPE, API } from \"./enums\";\r\nimport { Config } from \"./config\";\r\nimport { OpenDb } from \"./business/open_db\";\r\nimport { DropDb } from \"./business/drop_db\";\r\nimport * as KeyStore from \"./keystore/index\";\r\nimport { DbHelper } from \"./model/db_helper\";\r\nimport { TableHelper } from \"./model/table_helper\";\r\nimport { CreateDb } from \"./business/create_db\";\r\nimport { DataBase } from \"./model/database\";\r\nimport * as Select from './business/select/index';\r\nimport * as Count from './business/count/index';\r\nimport * as Insert from './business/insert/index';\r\nimport * as Remove from './business/remove/index';\r\nimport * as Update from './business/update/index';\r\nimport { Util } from \"./util\";\r\nimport { Clear } from \"./business/clear\";\r\nimport { BulkInsert } from \"./business/bulk_insert\";\r\nimport { IWebWorkerResult, IWebWorkerRequest } from \"./interfaces\";\r\n\r\nexport class QueryExecutor {\r\n\r\n    checkConnectionAndExecuteLogic(request: IWebWorkerRequest) {\r\n        LogHelper.log('checking connection and executing request:' + request.name);\r\n        switch (request.name) {\r\n            case API.CreateDb:\r\n            case API.IsDbExist:\r\n            case API.GetDbVersion:\r\n            case API.GetDbList:\r\n            case API.GetDbSchema:\r\n            case API.Get:\r\n            case API.Set:\r\n            case API.OpenDb:\r\n                this.executeLogic_(request);\r\n                break;\r\n            case API.ChangeLogStatus:\r\n                this.changeLogStatus_(request.query); break;\r\n            default:\r\n                switch (this.dbStatus_.conStatus) {\r\n                    case CONNECTION_STATUS.Connected: {\r\n                        this.executeLogic_(request);\r\n                    } break;\r\n                    case CONNECTION_STATUS.Closed: {\r\n                        if (this.isDbDeletedByBrowser_ === true) {\r\n                            this.createDb_(null, () => {\r\n                                this.isDbDeletedByBrowser_ = false;\r\n                                this.checkConnectionAndExecuteLogic(request);\r\n                            }, request.onError);\r\n                        }\r\n                        else {\r\n                            this.openDb_(this.activeDb_.name, () => {\r\n                                this.checkConnectionAndExecuteLogic(request);\r\n                            }, request.onError);\r\n                        }\r\n                    } break;\r\n                    default:\r\n                        break;\r\n                }\r\n        }\r\n    }\r\n\r\n    private changeLogStatus_(enableLog) {\r\n        Config.isLogEnabled = enableLog;\r\n    }\r\n\r\n    private returnResult_(result) {\r\n        (self as DedicatedWorkerGlobalScope).postMessage(result);\r\n    }\r\n\r\n    private executeLogic_(request: IWebWorkerRequest) {\r\n        const onSuccess = (results?) => {\r\n            this.returnResult_({\r\n                returnedValue: results\r\n            } as IWebWorkerResult);\r\n        };\r\n        const onError = (err) => {\r\n            this.returnResult_({\r\n                errorDetails: err,\r\n                errorOccured: true\r\n            } as IWebWorkerResult);\r\n        };\r\n\r\n        switch (request.name) {\r\n            case API.Select:\r\n                this.select_(request.query as ISelect, onSuccess, onError);\r\n                break;\r\n            case API.Insert: this.insert_(request.query as IInsert, onSuccess, onError);\r\n                break;\r\n            case API.Update: this.update_(request.query as IUpdate, onSuccess, onError);\r\n                break;\r\n            case API.Remove: this.remove_(request.query as IRemove, onSuccess, onError);\r\n                break;\r\n            case API.IsDbExist: this.isDbExist_(request.query, onSuccess, onError);\r\n                break;\r\n            case API.GetDbVersion:\r\n                this.getDbVersion_(request.query as string, onSuccess);\r\n                break;\r\n            case API.GetDbList:\r\n                this.getDbList_(onSuccess);\r\n                break;\r\n            case API.GetDbSchema:\r\n                this.getDbSchema_(request.query as string, onSuccess);\r\n                break;\r\n            case API.OpenDb:\r\n                if (this.isDbDeletedByBrowser_ === true) {\r\n                    this.createDb_(null, () => {\r\n                        this.isDbDeletedByBrowser_ = false;\r\n                        onSuccess();\r\n                    }, onError);\r\n                }\r\n                else {\r\n                    this.openDb_(request.query, onSuccess, onError);\r\n                }\r\n                break;\r\n            case API.CreateDb: this.createDb_(request.query as IDataBase, onSuccess, onError);\r\n                break;\r\n            case API.Clear: this.clear_(request.query as string, onSuccess, onError);\r\n                break;\r\n            case API.DropDb: this.dropDb_(onSuccess, onError);\r\n                break;\r\n            case API.Count: this.count_(request.query as ICount, onSuccess, onError);\r\n                break;\r\n            case API.BulkInsert: this.bulkInsert_(request.query as IInsert, onSuccess, onError);\r\n                break;\r\n            case API.ExportJson: this.exportJson_(request.query as ISelect, onSuccess, onError);\r\n                break;\r\n            case API.Get: this.get_(request.query as string, onSuccess, onError);\r\n                break;\r\n            case API.Set: this.set_(request.query as ISet, onSuccess, onError);\r\n                break;\r\n            default:\r\n                console.error('The Api:-' + request.name + ' does not support.');\r\n        }\r\n    }\r\n\r\n    private getDbSchema_(dbName: string, callback: (schema: DataBase) => void) {\r\n        IdbHelper.getDbSchema(dbName, callback);\r\n    }\r\n\r\n    private get isDbDeletedByBrowser_() {\r\n        return IdbHelper.isDbDeletedByBrowser;\r\n    }\r\n\r\n    private set isDbDeletedByBrowser_(value) {\r\n        IdbHelper.isDbDeletedByBrowser = value;\r\n    }\r\n\r\n    private getDbList_(callback: (dbList: string[]) => void) {\r\n        IdbHelper.getDbList(callback);\r\n    }\r\n\r\n    private get activeDb_() {\r\n        return IdbHelper.activeDb;\r\n    }\r\n\r\n    private set activeDb_(value) {\r\n        IdbHelper.activeDb = value;\r\n    }\r\n\r\n    private openDb_(dbName, onSuccess: () => void, onError: (err: IError) => void) {\r\n        this.getDbVersion_(dbName, (dbVersion) => {\r\n            if (dbVersion !== 0) {\r\n                this.activeDbVersion_ = dbVersion;\r\n                this.getDbSchema_(dbName, (result) => {\r\n                    this.activeDb_ = result;\r\n                    const openDbProject = new OpenDb(onSuccess, onError);\r\n                    openDbProject.execute();\r\n                });\r\n            }\r\n            else {\r\n                const err = new LogHelper(ERROR_TYPE.DbNotExist, { DbName: dbName });\r\n                err.logError();\r\n                onError(err.get());\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeDb_() {\r\n        if (IdbHelper.dbStatus.conStatus === CONNECTION_STATUS.Connected) {\r\n            IdbHelper.dbStatus.conStatus = CONNECTION_STATUS.ClosedByJsStore;\r\n            IdbHelper.dbConnection.close();\r\n        }\r\n    }\r\n\r\n    private dropDb_(onSuccess: () => void, onError: (err: IError) => void) {\r\n        this.closeDb_();\r\n        const dropDbInstance = new DropDb(onSuccess, onError);\r\n        dropDbInstance.deleteDb();\r\n    }\r\n\r\n    private update_(query: IUpdate, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const updateDbInstance = new Update.Instance(query, onSuccess, onError);\r\n        updateDbInstance.execute();\r\n    }\r\n\r\n    private insert_(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const insertInstance = new Insert.Instance(query, onSuccess, onError);\r\n        insertInstance.execute();\r\n    }\r\n\r\n    private bulkInsert_(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const bulkInsertInstance = new BulkInsert(query, onSuccess, onError);\r\n        bulkInsertInstance.execute();\r\n    }\r\n\r\n    private remove_(query: IRemove, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const deleteObject = new Remove.Instance(query, onSuccess, onError);\r\n        deleteObject.execute();\r\n    }\r\n\r\n    private select_(query: ISelect, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        if (typeof query.from === 'object') {\r\n            const selectJoinInstance = new Select.Join(query as ISelectJoin, onSuccess, onError);\r\n        }\r\n        else {\r\n            const selectInstance = new Select.Instance(query, onSuccess, onError);\r\n            selectInstance.execute();\r\n        }\r\n    }\r\n\r\n    private count_(query: ICount, onSuccess: () => void, onError: (err: IError) => void) {\r\n        if (typeof query.from === 'object') {\r\n            query['count'] = true;\r\n            const selectJoinInstance = new Select.Join(query as ISelectJoin, onSuccess, onError);\r\n        }\r\n        else {\r\n            const countInstance = new Count.Instance(query, onSuccess, onError);\r\n            countInstance.execute();\r\n        }\r\n    }\r\n\r\n    private createDb_(\r\n        dataBase: IDataBase, onSuccess: () => void, onError: (err: IError) => void\r\n    ) {\r\n        const processCreateDb = () => {\r\n            // save dbSchema in keystore\r\n            KeyStore.set(\"JsStore_\" + this.activeDb_.name + \"_Schema\", this.activeDb_);\r\n            // create meta data\r\n            const dbHelper = new DbHelper(IdbHelper.activeDb);\r\n            dbHelper.createMetaData((tablesMetaData: TableHelper[]) => {\r\n                const createDbInstance = new CreateDb(tablesMetaData, onSuccess, onError);\r\n            });\r\n        };\r\n        if (dataBase == null) {\r\n            processCreateDb();\r\n        }\r\n        else {\r\n            this.closeDb_();\r\n            this.getDbVersion_(dataBase.name, (version) => {\r\n                this.activeDbVersion_ = version ? version : 1;\r\n                IdbHelper.activeDb = new DataBase(dataBase);\r\n                processCreateDb();\r\n            });\r\n        }\r\n    }\r\n\r\n    private get activeDbVersion_() {\r\n        return IdbHelper.activeDbVersion;\r\n    }\r\n\r\n    private set activeDbVersion_(value) {\r\n        IdbHelper.activeDbVersion = value;\r\n    }\r\n\r\n    private getDbVersion_(dbName: string, callback: (version: number) => void) {\r\n        IdbHelper.getDbVersion(dbName, callback);\r\n    }\r\n\r\n    private get dbStatus_() {\r\n        return IdbHelper.dbStatus;\r\n    }\r\n\r\n    private clear_(tableName: string, onSuccess: () => void, onError: (err: IError) => void) {\r\n        const clearInstance = new Clear(tableName, onSuccess, onError);\r\n        clearInstance.execute();\r\n    }\r\n\r\n    private exportJson_(query: ISelect, onSuccess: (url: string) => void, onError: (err: IError) => void) {\r\n        this.select_(query, (results) => {\r\n            const url = URL.createObjectURL(new Blob([JSON.stringify(results)], {\r\n                type: \"text/json\"\r\n            }));\r\n            onSuccess(url);\r\n        }, (err) => {\r\n            onError(err);\r\n        });\r\n    }\r\n\r\n    private getType_(value) {\r\n        return Util.getType(value);\r\n    }\r\n\r\n    private isDbExist_(dbInfo, onSuccess: (isExist: boolean) => void, onError: (err: IError) => void) {\r\n        if (this.dbStatus_.conStatus !== CONNECTION_STATUS.UnableToStart) {\r\n            if (this.getType_(dbInfo) === DATA_TYPE.String) {\r\n                this.getDbVersion_(dbInfo, (dbVersion) => {\r\n                    onSuccess(Boolean(dbVersion));\r\n                });\r\n            }\r\n            else {\r\n                this.getDbVersion_(dbInfo.dbName, (dbVersion) => {\r\n                    onSuccess(dbInfo.table.version <= dbVersion);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            const error = {\r\n                message: null,\r\n                type: this.dbStatus_.lastError,\r\n            } as IError;\r\n            switch (error.type) {\r\n                case ERROR_TYPE.IndexedDbBlocked:\r\n                    error.message = \"IndexedDB is blocked\"; break;\r\n                case ERROR_TYPE.IndexedDbUndefined:\r\n                    error.message = \"IndexedDB is not supported\"; break;\r\n                default: break;\r\n            }\r\n            onError(error);\r\n        }\r\n    }\r\n\r\n    private get_(key: string, onSuccess: (value) => void, onError: (err: IError) => void) {\r\n        KeyStore.get(key, onSuccess, onError as any);\r\n    }\r\n\r\n    private set_(query: ISet, onSuccess: (value) => void, onError: (err: IError) => void) {\r\n        KeyStore.set(query.key, query.value, onSuccess, onError as any);\r\n    }\r\n}","import { IdbHelper } from \"./idb_helper\";\r\nimport { IError } from \"../interfaces\";\r\nimport { CONNECTION_STATUS, ERROR_TYPE } from \"../enums\";\r\nimport { LogHelper } from \"../log_helper\";\r\nimport { Table } from \"../model/table\";\r\n\r\nexport class OpenDb {\r\n    private dbName_: string;\r\n    private onSuccess_: () => void;\r\n    private onError_: (err: IError) => void;\r\n\r\n    constructor(onSuccess: () => void, onError: (err: IError) => void) {\r\n        this.dbName_ = IdbHelper.activeDb.name;\r\n        this.onSuccess_ = onSuccess;\r\n        this.onError_ = onError;\r\n    }\r\n\r\n    private get dbStatus_() {\r\n        return IdbHelper.dbStatus;\r\n    }\r\n\r\n    private set dbConnection_(value) {\r\n        IdbHelper.dbConnection = value;\r\n    }\r\n\r\n    private get dbConnection_() {\r\n        return IdbHelper.dbConnection;\r\n    }\r\n\r\n    private updateDbStatus_(status: CONNECTION_STATUS, err?: ERROR_TYPE) {\r\n        IdbHelper.updateDbStatus(status, err);\r\n    }\r\n\r\n    private onDbDroppedByBrowser_(deleteMetaData?: boolean) {\r\n        IdbHelper.callDbDroppedByBrowser(deleteMetaData);\r\n    }\r\n\r\n    execute() {\r\n        if (this.dbName_.length > 0) {\r\n            const dbRequest = indexedDB.open(this.dbName_, IdbHelper.activeDbVersion);\r\n\r\n            dbRequest.onerror = (event: any) => {\r\n                if (this.onError_ != null) {\r\n                    this.onError_(event.target.error);\r\n                }\r\n            };\r\n\r\n            dbRequest.onsuccess = (event) => {\r\n                this.dbStatus_.conStatus = CONNECTION_STATUS.Connected;\r\n                this.dbConnection_ = dbRequest.result;\r\n                (this.dbConnection_ as any).onclose = (e) => {\r\n                    this.onDbDroppedByBrowser_();\r\n                    this.updateDbStatus_(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\r\n                };\r\n\r\n                this.dbConnection_.onversionchange = (e: IDBVersionChangeEvent) => {\r\n                    if (e.newVersion === null) { // An attempt is made to delete the db\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            (e.target as any).close(); // Manually close our connection to the db\r\n                            this.onDbDroppedByBrowser_(true);\r\n                            this.updateDbStatus_(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                IdbHelper.dbConnection.onerror = (e) => {\r\n                    IdbHelper.dbStatus.lastError = (\"Error occured in connection :\" + (e.target as any).result) as any;\r\n                };\r\n\r\n                IdbHelper.dbConnection.onabort = (e) => {\r\n                    IdbHelper.dbStatus = {\r\n                        conStatus: CONNECTION_STATUS.Closed,\r\n                        lastError: ERROR_TYPE.ConnectionAborted\r\n                    };\r\n                };\r\n                if (this.onSuccess_ != null) {\r\n                    this.onSuccess_();\r\n                }\r\n                this.setPrimaryKey_();\r\n            };\r\n        }\r\n        else {\r\n            const error = new LogHelper(ERROR_TYPE.UndefinedDbName);\r\n            error.throw();\r\n        }\r\n    }\r\n\r\n    private get activeDb_() {\r\n        return IdbHelper.activeDb;\r\n    }\r\n\r\n    private setPrimaryKey_() {\r\n        this.activeDb_.tables.forEach((table, index) => {\r\n            table.columns.every(item => {\r\n                IdbHelper.activeDb.tables[index].primaryKey = item.primaryKey ? item.name : \"\";\r\n                return !item.primaryKey;\r\n            });\r\n        });\r\n    }\r\n}","import { DataBase } from \"./database\";\r\nimport { TableHelper } from \"./table_helper\";\r\nimport { Table } from \"./table\";\r\n\r\nexport class DbHelper {\r\n    name: string;\r\n    tables: Table[] = [];\r\n\r\n    constructor(dataBase: DataBase) {\r\n        this.name = dataBase.name;\r\n        this.tables = dataBase.tables;\r\n    }\r\n\r\n    createMetaData(callBack: (tablesMetaData: TableHelper[]) => void) {\r\n        let index = 0;\r\n        const tableHelperList: TableHelper[] = [];\r\n        const createMetaDataForTable = () => {\r\n            if (index < this.tables.length) {\r\n                const table: Table = this.tables[index],\r\n                    tableHelperInstance: TableHelper = new TableHelper(table);\r\n                tableHelperInstance.createMetaData(this.name, () => {\r\n                    tableHelperInstance.callback = null;\r\n                    tableHelperList.push(tableHelperInstance);\r\n                    createMetaDataForTable();\r\n                });\r\n                ++index;\r\n            }\r\n            else {\r\n                callBack(tableHelperList);\r\n            }\r\n        };\r\n        createMetaDataForTable();\r\n    }\r\n}","import { Table } from \"./table\";\r\nimport { Column } from \"./column\";\r\nimport * as KeyStore from \"../keystore/index\";\r\nimport { IdbHelper } from \"../business/idb_helper\";\r\n\r\nexport class TableHelper {\r\n    name: string;\r\n    columns: Column[] = [];\r\n\r\n    // internal Members\r\n    primaryKey: string;\r\n    version: number;\r\n    requireDelete = false;\r\n    requireCreation = false;\r\n    callback: () => void;\r\n\r\n    constructor(table: Table) {\r\n        this.name = table.name;\r\n        this.version = table.version;\r\n        this.columns = table.columns;\r\n        this.setPrimaryKey_();\r\n    }\r\n\r\n    createMetaData(dbName: string, callBack: () => void) {\r\n        this.callback = callBack;\r\n        this.setRequireDelete_(dbName);\r\n        this.setDbVersion_(dbName);\r\n    }\r\n\r\n    private setPrimaryKey_() {\r\n        this.columns.every((item) => {\r\n            this.primaryKey = item.primaryKey ? item.name : \"\";\r\n            return !item.primaryKey;\r\n        });\r\n    }\r\n\r\n    private setRequireDelete_(dbName: string) {\r\n        KeyStore.get(`JsStore_${dbName}_${this.name}_Version`, (tableVersion) => {\r\n            if (tableVersion == null) {\r\n                this.requireCreation = true;\r\n            }\r\n            // mark only table which has version greater than store version\r\n            else if (tableVersion < this.version) {\r\n                this.requireDelete = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private setDbVersion_(dbName: string) {\r\n        IdbHelper.activeDbVersion = IdbHelper.activeDbVersion > this.version ? IdbHelper.activeDbVersion : this.version;\r\n        // setting db version\r\n        KeyStore.set(`JsStore_${dbName}_Db_Version`, IdbHelper.activeDbVersion);\r\n        // setting table version\r\n        KeyStore.set(`JsStore_${dbName}_${this.name}_Version`, IdbHelper.activeDbVersion, this.callback);\r\n        this.version = IdbHelper.activeDbVersion;\r\n    }\r\n}","import { TableHelper } from \"../model/table_helper\";\r\nimport { IError } from \"../interfaces\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { CONNECTION_STATUS, ERROR_TYPE } from \"../enums\";\r\nimport { Column } from \"../model/column\";\r\nimport * as KeyStore from \"../keystore/index\";\r\n\r\nexport class CreateDb {\r\n    private dbName_: string;\r\n\r\n    private get activeDb_() {\r\n        return IdbHelper.activeDb;\r\n    }\r\n\r\n    private get dbVersion_() {\r\n        return IdbHelper.activeDbVersion;\r\n    }\r\n\r\n    private get dbStatus_() {\r\n        return IdbHelper.dbStatus;\r\n    }\r\n\r\n    private set dbStatus_(value) {\r\n        IdbHelper.dbStatus = value;\r\n    }\r\n\r\n    private set dbConnection_(value) {\r\n        IdbHelper.dbConnection = value;\r\n    }\r\n\r\n    private get dbConnection_() {\r\n        return IdbHelper.dbConnection;\r\n    }\r\n\r\n    private getDbList_(callback: (dbList: string[]) => void) {\r\n        IdbHelper.getDbList(callback);\r\n    }\r\n\r\n    constructor(tablesMetaData: TableHelper[], onSuccess: (listOf) => void, onError: (err: IError) => void) {\r\n        this.dbName_ = this.activeDb_.name;\r\n        const listofTableCreated = [];\r\n        const dbRequest = indexedDB.open(this.dbName_, this.dbVersion_);\r\n\r\n        dbRequest.onerror = (event) => {\r\n            if (onError != null) {\r\n                onError((event as any).target.error);\r\n            }\r\n        };\r\n\r\n        dbRequest.onsuccess = (event) => {\r\n            this.dbStatus_.conStatus = CONNECTION_STATUS.Connected;\r\n            this.dbConnection_ = dbRequest.result;\r\n            (this.dbConnection_ as any).onclose = (e) => {\r\n                IdbHelper.callDbDroppedByBrowser();\r\n                IdbHelper.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\r\n            };\r\n\r\n            this.dbConnection_.onversionchange = (e: IDBVersionChangeEvent) => {\r\n                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                    (e.target as any).close(); // Manually close our connection to the db\r\n                    IdbHelper.callDbDroppedByBrowser(true);\r\n                    IdbHelper.updateDbStatus(CONNECTION_STATUS.Closed, ERROR_TYPE.ConnectionClosed);\r\n                }\r\n            };\r\n\r\n            this.dbConnection_.onerror = (e) => {\r\n                IdbHelper.dbStatus.lastError = (\"Error occured in connection :\" + (e.target as any).result) as any;\r\n            };\r\n\r\n            this.dbConnection_.onabort = (e) => {\r\n                this.dbStatus_ = {\r\n                    conStatus: CONNECTION_STATUS.Closed,\r\n                    lastError: ERROR_TYPE.ConnectionAborted\r\n                };\r\n            };\r\n\r\n            // save in database list\r\n            this.saveDbName_();\r\n            if (onSuccess != null) {\r\n                onSuccess(listofTableCreated);\r\n            }\r\n        };\r\n\r\n        dbRequest.onupgradeneeded = (event) => {\r\n            const dbConnection = (event as any).target.result;\r\n            const createObjectStore = (item: TableHelper, index) => {\r\n                try {\r\n                    if (item.primaryKey.length > 0) {\r\n                        IdbHelper.activeDb.tables[index].primaryKey = item.primaryKey;\r\n                        const store = dbConnection.createObjectStore(item.name, {\r\n                            keyPath: item.primaryKey\r\n                        });\r\n                        item.columns.forEach((column: Column) => {\r\n                            if (column.enableSearch === true) {\r\n                                const options = column.primaryKey ? { unique: true } : { unique: column.unique };\r\n                                options['multiEntry'] = column.multiEntry;\r\n                                store.createIndex(column.name, column.name, options);\r\n                                if (column.autoIncrement) {\r\n                                    KeyStore.set(`JsStore_${this.dbName_}_${item.name}_${column.name}_Value`, 0);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        const store = dbConnection.createObjectStore(item.name, {\r\n                            autoIncrement: true\r\n                        });\r\n                        item.columns.forEach((column: Column) => {\r\n                            const options = { unique: column.unique, multiEntry: column.multiEntry };\r\n                            store.createIndex(column.name, column.name, options);\r\n                            if (column.autoIncrement) {\r\n                                KeyStore.set(`JsStore_${this.dbName_}_${item.name}_${column.name}_Value`, 0);\r\n                            }\r\n                        });\r\n                    }\r\n                    listofTableCreated.push(item.name);\r\n                    // setting the table version\r\n                    KeyStore.set(`JsStore_${this.dbName_}_${item.name}_Version`, item.version);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            };\r\n            tablesMetaData.forEach((item: TableHelper, index) => {\r\n                if (item.requireDelete) {\r\n                    // Delete the old datastore.    \r\n                    if (dbConnection.objectStoreNames.contains(item.name)) {\r\n                        dbConnection.deleteObjectStore(item.name);\r\n                    }\r\n                    createObjectStore(item, index);\r\n                }\r\n                else if (item.requireCreation) {\r\n                    createObjectStore(item, index);\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    private saveDbName_() {\r\n        this.getDbList_((result) => {\r\n            if (result.indexOf(this.dbName_) < 0) {\r\n                result.push(this.dbName_);\r\n                IdbHelper.setDbList(result);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { IDataBase } from \"../interfaces\";\r\nimport { Table } from \"./table\";\r\n\r\nexport class DataBase {\r\n    name: string;\r\n    tables: Table[] = [];\r\n\r\n    constructor(dataBase: IDataBase) {\r\n        this.name = dataBase.name;\r\n        dataBase.tables.forEach((item) => {\r\n            this.tables.push(new Table(item));\r\n        });\r\n    }\r\n}\r\n","import { ITable } from \"../interfaces\";\r\nimport { Column } from \"./column\";\r\n\r\nexport class Table implements ITable {\r\n    name: string;\r\n    columns: Column[] = [];\r\n    version: number;\r\n    primaryKey: string;\r\n\r\n    constructor(table: ITable) {\r\n        this.name = table.name;\r\n        this.version = table.version == null ? 1 : table.version;\r\n        table.columns.forEach((item) => {\r\n            this.columns.push(new Column(item, table.name));\r\n        });\r\n    }\r\n}","import { IColumn } from \"../interfaces\";\r\nimport { LogHelper } from \"../log_helper\";\r\nimport { ERROR_TYPE } from \"../enums\";\r\n\r\nexport class Column implements IColumn {\r\n    name: string;\r\n    autoIncrement: boolean;\r\n    primaryKey: boolean;\r\n    unique: boolean;\r\n    notNull: boolean;\r\n    dataType: string;\r\n    default;\r\n    multiEntry: boolean;\r\n    enableSearch: boolean;\r\n\r\n    constructor(key: IColumn, tableName: string) {\r\n        if (key.name != null) {\r\n            this.name = key.name;\r\n        }\r\n        else {\r\n            const err = new LogHelper(ERROR_TYPE.UndefinedColumnName, { TableName: tableName });\r\n            err.throw();\r\n        }\r\n        this.autoIncrement = key.autoIncrement != null ? key.autoIncrement : false;\r\n        this.primaryKey = key.primaryKey != null ? key.primaryKey : false;\r\n        this.unique = key.unique != null ? key.unique : false;\r\n        this.notNull = key.notNull != null ? key.notNull : false;\r\n        this.dataType = key.dataType != null ? key.dataType : (key.autoIncrement ? 'number' : null);\r\n        this.default = key.default;\r\n        this.multiEntry = key.multiEntry == null ? false : key.multiEntry;\r\n        this.enableSearch = key.enableSearch == null ? true : key.enableSearch;\r\n    }\r\n\r\n}","export * from './instance';\r\nexport * from './join';","import { ISelect, IError } from \"../../interfaces\";\r\nimport { Helper } from \"./helper\";\r\nimport { LogHelper } from \"../../log_helper\";\r\nimport { ERROR_TYPE, IDB_MODE, QUERY_OPTION } from \"../../enums\";\r\n\r\nexport class Instance extends Helper {\r\n   \r\n    constructor(query: ISelect, onSuccess: (results: object[]) => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.onError = onError;\r\n        this.onSuccess = onSuccess;\r\n        this.query = query;\r\n        this.skipRecord = query.skip;\r\n        this.limitRecord = query.limit;\r\n        this.tableName = query.from as string;\r\n    }\r\n\r\n    execute() {\r\n        if (this.isTableExist(this.tableName) === true) {\r\n            try {\r\n                if (this.query.where !== undefined) {\r\n                    this.addGreatAndLessToNotOp();\r\n                    this.initTransaction_();\r\n                    if (Array.isArray(this.query.where)) {\r\n                        this.processWhereArrayQry();\r\n                    }\r\n                    else {\r\n                        this.processWhere_();\r\n                    }\r\n                }\r\n                else {\r\n                    this.initTransaction_();\r\n                    this.executeWhereUndefinedLogic();\r\n                }\r\n            }\r\n            catch (ex) {\r\n                this.errorOccured = true;\r\n                this.onExceptionOccured(ex, { TableName: this.query.from });\r\n            }\r\n        }\r\n        else {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(\r\n                new LogHelper(ERROR_TYPE.TableNotExist, { TableName: this.query.from }),\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    private processWhereArrayQry() {\r\n        this.isArrayQry = true;\r\n        const wherequery = this.query.where,\r\n            pKey = this.getPrimaryKey(this.query.from);\r\n        let isFirstWhere = true, output = [], operation;\r\n\r\n        const isItemExist = (keyValue) => {\r\n            let isExist = false;\r\n            output.every((item) => {\r\n                if (item[pKey] === keyValue) {\r\n                    isExist = true;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return isExist;\r\n        };\r\n        const onSuccess = () => {\r\n            if (operation === QUERY_OPTION.And) {\r\n                const doAnd = () => {\r\n                    let andResults = [];\r\n                    this.results.forEach((item) => {\r\n                        if (isItemExist(item[pKey])) {\r\n                            andResults.push(item);\r\n                        }\r\n                    });\r\n                    output = andResults;\r\n                    andResults = null;\r\n                };\r\n                if (output.length > 0) {\r\n                    doAnd();\r\n                }\r\n                else if (isFirstWhere === true) {\r\n                    output = this.results;\r\n                }\r\n                else {\r\n                    doAnd();\r\n                }\r\n            }\r\n            else {\r\n                if (output.length > 0) {\r\n                    this.results = [...output, ...this.results];\r\n                    this.removeDuplicates();\r\n                    output = this.results;\r\n                }\r\n                else {\r\n                    output = this.results;\r\n                }\r\n            }\r\n            if (wherequery.length > 0) {\r\n                this.results = [];\r\n                processFirstQry();\r\n            }\r\n            else {\r\n                this.results = output;\r\n            }\r\n            isFirstWhere = false;\r\n        };\r\n        const processFirstQry = () => {\r\n            this.query.where = wherequery.shift();\r\n            if (this.query.where['or']) {\r\n                if (Object.keys(this.query.where).length === 1) {\r\n                    operation = 'or';\r\n                    this.query.where = this.query.where['or'];\r\n                    this.onWhereArrayQrySuccess = onSuccess;\r\n                }\r\n                else {\r\n                    operation = 'and';\r\n                    this.onWhereArrayQrySuccess = onSuccess;\r\n                }\r\n            }\r\n            else {\r\n                operation = 'and';\r\n                this.onWhereArrayQrySuccess = onSuccess;\r\n            }\r\n            this.processWhere_();\r\n        };\r\n        processFirstQry();\r\n    }\r\n\r\n    protected onQueryFinished() {\r\n        if (this.isOr === true) {\r\n            this.orQuerySuccess_();\r\n        }\r\n        else if (this.isArrayQry === true) {\r\n            this.onWhereArrayQrySuccess();\r\n        }\r\n        else if (this.isTransaction === true) {\r\n            this.onTransactionCompleted_();\r\n        }\r\n    }\r\n\r\n    private initTransaction_() {\r\n        this.createTransaction([this.tableName], this.onTransactionCompleted_, IDB_MODE.ReadOnly);\r\n        this.objectStore = this.transaction.objectStore(this.tableName);\r\n    }\r\n\r\n    private processWhere_() {\r\n        if (this.query.where.or) {\r\n            this.processOrLogic_();\r\n        }\r\n        this.goToWhereLogic();\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.processOrderBy();\r\n            if (this.query.distinct) {\r\n                const groupBy = [];\r\n                const result = this.results[0];\r\n                for (const key in result) {\r\n                    groupBy.push(key);\r\n                }\r\n                const primaryKey = this.getPrimaryKey(this.query.from),\r\n                    index = groupBy.indexOf(primaryKey);\r\n                groupBy.splice(index, 1);\r\n                this.query.groupBy = groupBy.length > 0 ? groupBy : null;\r\n            }\r\n            if (this.query.groupBy) {\r\n                if (this.query.aggregate) {\r\n                    this.executeAggregateGroupBy();\r\n                }\r\n                else {\r\n                    this.processGroupBy();\r\n                }\r\n            }\r\n            else if (this.query.aggregate) {\r\n                this.processAggregateQry();\r\n            }\r\n            this.onSuccess(this.results);\r\n        }\r\n    }\r\n\r\n    private orQueryFinish_() {\r\n        this.isOr = false;\r\n        this.results = this.orInfo.results;\r\n        // free or info memory\r\n        this.orInfo = undefined;\r\n        this.removeDuplicates();\r\n        this.onQueryFinished();\r\n    }\r\n\r\n    private orQuerySuccess_() {\r\n        this.orInfo.results = [... this.orInfo.results, ...this.results];\r\n        if (!this.query.limit || (this.query.limit > this.orInfo.results.length)) {\r\n            this.results = [];\r\n            const key = this.getObjectFirstKey(this.orInfo.orQuery);\r\n            if (key != null) {\r\n                const where = {};\r\n                where[key] = this.orInfo.orQuery[key];\r\n                delete this.orInfo.orQuery[key];\r\n                this.query.where = where;\r\n                this.goToWhereLogic();\r\n            }\r\n            else {\r\n                this.orQueryFinish_();\r\n            }\r\n        }\r\n        else {\r\n            this.orQueryFinish_();\r\n        }\r\n    }\r\n\r\n    private processOrLogic_() {\r\n        this.isOr = true;\r\n        this.orInfo = {\r\n            orQuery: this.query.where.or,\r\n            results: []\r\n        };\r\n        // free or memory\r\n        delete this.query.where.or;\r\n    }\r\n}","import { GroupByHelper } from \"./group_by_helper\";\r\nimport { DATA_TYPE } from \"../../enums\";\r\n\r\nexport class Helper extends GroupByHelper {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected processOrderBy() {\r\n        const order = this.query.order;\r\n        if (order && this.results.length > 0 && !this.sorted && order.by) {\r\n            order.type = order.type ? order.type.toLowerCase() : 'asc';\r\n            const orderColumn = order.by,\r\n                sortNumberInAsc = () => {\r\n                    this.results.sort((a, b) => {\r\n                        return a[orderColumn] - b[orderColumn];\r\n                    });\r\n                },\r\n                sortNumberInDesc = () => {\r\n                    this.results.sort((a, b) => {\r\n                        return b[orderColumn] - a[orderColumn];\r\n                    });\r\n                },\r\n                sortAlphabetInAsc = () => {\r\n                    this.results.sort((a, b) => {\r\n                        return a[orderColumn].toLowerCase().localeCompare(b[orderColumn].toLowerCase());\r\n                    });\r\n                },\r\n                sortAlphabetInDesc = () => {\r\n                    this.results.sort((a, b) => {\r\n                        return b[orderColumn].toLowerCase().localeCompare(a[orderColumn].toLowerCase());\r\n                    });\r\n                };\r\n            if (typeof this.results[0][orderColumn] === DATA_TYPE.String) {\r\n                if (order.type === 'asc') {\r\n                    sortAlphabetInAsc();\r\n                }\r\n                else {\r\n                    sortAlphabetInDesc();\r\n                }\r\n            }\r\n            else if (typeof this.results[0][orderColumn] === DATA_TYPE.Number) {\r\n                if (order.type === 'asc') {\r\n                    sortNumberInAsc();\r\n                }\r\n                else {\r\n                    sortNumberInDesc();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processAggregateQry() {\r\n        const datas = this.results,\r\n            results = {};\r\n        let columnToAggregate;\r\n        // free results memory\r\n        this.results = undefined;\r\n        for (const prop in this.query.aggregate) {\r\n            const aggregateColumn = this.query.aggregate[prop];\r\n            const aggregateValType = this.getType(aggregateColumn);\r\n            switch (prop) {\r\n                case 'count':\r\n                    const getCount = () => {\r\n                        let result = 0;\r\n                        for (const i in datas) {\r\n                            result += datas[i][columnToAggregate] ? 1 : 0;\r\n                        }\r\n                        return result;\r\n                    };\r\n                    if (aggregateValType === DATA_TYPE.String) {\r\n                        columnToAggregate = aggregateColumn;\r\n                        results[\"count(\" + columnToAggregate + \")\"] = getCount();\r\n                    }\r\n                    else if (aggregateValType === DATA_TYPE.Array) {\r\n                        for (const key in aggregateColumn) {\r\n                            columnToAggregate = aggregateColumn[key];\r\n                            results[\"count(\" + columnToAggregate + \")\"] = getCount();\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'max':\r\n                    const getMax = () => {\r\n                        let result = 0;\r\n                        for (const i in datas) {\r\n                            result = result > datas[i][columnToAggregate] ?\r\n                                result : datas[i][columnToAggregate];\r\n                        }\r\n                        return result;\r\n                    };\r\n                    if (aggregateValType === DATA_TYPE.String) {\r\n                        columnToAggregate = aggregateColumn;\r\n                        results[\"max(\" + columnToAggregate + \")\"] = getMax();\r\n                    }\r\n                    else if (aggregateValType === DATA_TYPE.Array) {\r\n                        for (const key in aggregateColumn) {\r\n                            columnToAggregate = aggregateColumn[key];\r\n                            results[\"max(\" + columnToAggregate + \")\"] = getMax();\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'min':\r\n                    const getMin = () => {\r\n                        let result = Infinity, value = Infinity;\r\n                        for (const i in datas) {\r\n                            value = datas[i][columnToAggregate] ?\r\n                                datas[i][columnToAggregate] : Infinity;\r\n                            result = result < value ? result : value;\r\n                        }\r\n                        return result;\r\n                    };\r\n                    if (aggregateValType === DATA_TYPE.String) {\r\n                        columnToAggregate = aggregateColumn;\r\n                        results[\"min(\" + columnToAggregate + \")\"] = getMin();\r\n                    }\r\n                    else if (aggregateValType === DATA_TYPE.Array) {\r\n                        for (const key in aggregateColumn) {\r\n                            columnToAggregate = aggregateColumn[key];\r\n                            results[\"min(\" + columnToAggregate + \")\"] = getMin();\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'sum':\r\n                    const getSum = () => {\r\n                        let result = 0;\r\n                        for (const i in datas) {\r\n                            result += datas[i][columnToAggregate];\r\n                        }\r\n                        return result;\r\n                    };\r\n                    if (aggregateValType === DATA_TYPE.String) {\r\n                        columnToAggregate = aggregateColumn;\r\n                        results[\"sum(\" + columnToAggregate + \")\"] = getSum();\r\n                    }\r\n                    else if (aggregateValType === DATA_TYPE.Array) {\r\n                        for (const key in aggregateColumn) {\r\n                            columnToAggregate = aggregateColumn[key];\r\n                            results[\"sum(\" + columnToAggregate + \")\"] = getSum();\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'avg':\r\n                    const getAvg = () => {\r\n                        let result = 0;\r\n                        for (const i in datas) {\r\n                            result += datas[i][columnToAggregate];\r\n                        }\r\n                        return result / datas.length;\r\n                    };\r\n                    if (aggregateValType === DATA_TYPE.String) {\r\n                        columnToAggregate = aggregateColumn;\r\n                        results[\"avg(\" + columnToAggregate + \")\"] = getAvg();\r\n                    }\r\n                    else if (aggregateValType === DATA_TYPE.Array) {\r\n                        for (const key in aggregateColumn) {\r\n                            columnToAggregate = aggregateColumn[key];\r\n                            results[\"avg(\" + columnToAggregate + \")\"] = getAvg();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // add results to the first index of result\r\n        for (const prop in results) {\r\n            datas[0][prop] = results[prop];\r\n        }\r\n        this.results = datas;\r\n    }\r\n}","import { Where } from \"./where\";\r\nimport { DATA_TYPE, QUERY_OPTION } from \"../../enums\";\r\n\r\nexport class GroupByHelper extends Where {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected processGroupBy() {\r\n        const grpQry = this.query.groupBy as any;\r\n        let datas = this.results;\r\n        const lookUpObj = {};\r\n        // free results memory\r\n        this.results = this.query.groupBy = undefined;\r\n        if (this.getType(grpQry) === DATA_TYPE.String) {\r\n            for (const i in datas) {\r\n                lookUpObj[datas[i][grpQry as string]] = datas[i];\r\n            }\r\n        }\r\n        else {\r\n            let objKey;\r\n            for (const i in datas) {\r\n                objKey = \"\";\r\n                for (const column in grpQry) {\r\n                    objKey += datas[i][grpQry[column]];\r\n                }\r\n                lookUpObj[objKey] = datas[i];\r\n            }\r\n        }\r\n        // free datas memory\r\n        datas = [];\r\n        for (const i in lookUpObj) {\r\n            datas.push(lookUpObj[i]);\r\n        }\r\n        this.results = datas;\r\n    }\r\n\r\n    protected executeAggregateGroupBy() {\r\n        const grpQry = this.query.groupBy as any;\r\n        let datas = this.results;\r\n        const lookUpObj = {};\r\n        // assign aggregate and free aggregate memory\r\n        const aggregateQry = this.query.aggregate;\r\n        this.query.aggregate = undefined;\r\n        // free results memory\r\n        this.results = undefined;\r\n\r\n        let index;\r\n        let objKey;\r\n        let value;\r\n        let columnToAggregate;\r\n        const calculateAggregate = () => {\r\n            for (const prop in aggregateQry) {\r\n                const aggregateColumn = aggregateQry[prop];\r\n                const aggregateValType = this.getType(aggregateColumn);\r\n                switch (prop) {\r\n                    case QUERY_OPTION.Count:\r\n                        const getCount = () => {\r\n                            value = lookUpObj[objKey];\r\n                            // get old value\r\n                            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\r\n                            // add with old value if data exist\r\n                            value += datas[index][columnToAggregate] ? 1 : 0;\r\n                            return value;\r\n                        };\r\n                        if (aggregateValType === DATA_TYPE.String) {\r\n                            columnToAggregate = aggregateColumn;\r\n                            datas[index][\"count(\" + columnToAggregate + \")\"] = getCount();\r\n                        }\r\n                        else if (aggregateValType === DATA_TYPE.Array) {\r\n                            for (const item in aggregateColumn) {\r\n                                columnToAggregate = aggregateColumn[item];\r\n                                datas[index][\"count(\" + columnToAggregate + \")\"] = getCount();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case QUERY_OPTION.Max:\r\n                        const getMax = () => {\r\n                            value = lookUpObj[objKey];\r\n                            // get old value\r\n                            value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\r\n                            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\r\n                                datas[index][columnToAggregate] : 0;\r\n                            // compare between old value and new value\r\n                            return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\r\n                        };\r\n\r\n                        if (aggregateValType === DATA_TYPE.String) {\r\n                            columnToAggregate = aggregateColumn;\r\n                            datas[index][\"max(\" + columnToAggregate + \")\"] = getMax();\r\n                        }\r\n                        else if (aggregateValType === DATA_TYPE.Array) {\r\n                            for (const item in aggregateColumn) {\r\n                                columnToAggregate = aggregateColumn[item];\r\n                                datas[index][\"max(\" + columnToAggregate + \")\"] = getMax();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case QUERY_OPTION.Min:\r\n                        const getMin = () => {\r\n                            value = lookUpObj[objKey];\r\n                            // get old value\r\n                            value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\r\n                            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\r\n                                datas[index][columnToAggregate] : Infinity;\r\n                            // compare between old value and new value\r\n                            return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\r\n                        };\r\n\r\n                        if (aggregateValType === DATA_TYPE.String) {\r\n                            columnToAggregate = aggregateColumn;\r\n                            datas[index][\"min(\" + columnToAggregate + \")\"] = getMin();\r\n                        }\r\n                        else if (aggregateValType === DATA_TYPE.Array) {\r\n                            for (const item in aggregateColumn) {\r\n                                columnToAggregate = aggregateColumn[item];\r\n                                datas[index][\"min(\" + columnToAggregate + \")\"] = getMin();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case QUERY_OPTION.Sum:\r\n                        const getSum = () => {\r\n                            value = lookUpObj[objKey];\r\n                            // get old value\r\n                            value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\r\n                            // add with old value if data exist\r\n                            value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\r\n                            return value;\r\n                        };\r\n                        if (aggregateValType === DATA_TYPE.String) {\r\n                            columnToAggregate = aggregateColumn;\r\n                            datas[index][\"sum(\" + columnToAggregate + \")\"] = getSum();\r\n                        }\r\n                        else if (aggregateValType === DATA_TYPE.Array) {\r\n                            for (const item in aggregateColumn) {\r\n                                columnToAggregate = aggregateColumn[item];\r\n                                datas[index][\"sum(\" + columnToAggregate + \")\"] = getSum();\r\n                            }\r\n                        }\r\n                        break;\r\n                    case QUERY_OPTION.Avg:\r\n                        const getAvg = () => {\r\n                            value = lookUpObj[objKey];\r\n                            // get old sum value\r\n                            let sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\r\n                            // add with old value if data exist\r\n                            sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\r\n                            datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn;\r\n                            // get old count value\r\n                            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\r\n                            // add with old value if data exist\r\n                            value += datas[index][columnToAggregate] ? 1 : 0;\r\n                            datas[index][\"count(\" + columnToAggregate + \")\"] = value;\r\n                        };\r\n\r\n                        if (aggregateValType === DATA_TYPE.String) {\r\n                            columnToAggregate = aggregateColumn;\r\n                            getAvg();\r\n                        }\r\n                        else if (aggregateValType === DATA_TYPE.Array) {\r\n                            for (const item in aggregateColumn) {\r\n                                columnToAggregate = aggregateColumn[item];\r\n                                getAvg();\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (this.getType(grpQry) === DATA_TYPE.String) {\r\n            for (index in datas) {\r\n                objKey = datas[index][grpQry];\r\n                calculateAggregate();\r\n                lookUpObj[objKey] = datas[index];\r\n            }\r\n        }\r\n        else {\r\n            for (index in datas) {\r\n                objKey = \"\";\r\n                for (const column in grpQry) {\r\n                    objKey += datas[index][grpQry[column]];\r\n                }\r\n                calculateAggregate();\r\n                lookUpObj[objKey] = datas[index];\r\n            }\r\n\r\n        }\r\n        // free datas memory\r\n        datas = [];\r\n        for (const i in lookUpObj) {\r\n            datas.push(lookUpObj[i]);\r\n        }\r\n        // Checking for avg and if exist then fill the datas;\r\n        if (aggregateQry.avg) {\r\n            if (this.getType(aggregateQry.avg) === DATA_TYPE.String) {\r\n                for (index in datas) {\r\n                    const sumForAvg = datas[index][\"sum(\" + aggregateQry.avg + \")\"],\r\n                        countForAvg = datas[index][\"count(\" + aggregateQry.avg + \")\"];\r\n                    datas[index][\"avg(\" + aggregateQry.avg + \")\"] = sumForAvg / countForAvg;\r\n                    if (aggregateQry.count !== aggregateQry.avg) {\r\n                        delete datas[index][\"count(\" + aggregateQry.avg + \")\"];\r\n                    }\r\n                    if (aggregateQry.sum !== aggregateQry.avg) {\r\n                        delete datas[index][\"sum(\" + aggregateQry.avg + \")\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const isCountTypeString = this.getType(aggregateQry.count) === DATA_TYPE.String;\r\n                const isSumTypeString = this.getType(aggregateQry.sum) === DATA_TYPE.String;\r\n                for (index in datas) {\r\n                    for (const column in aggregateQry.avg as any) {\r\n                        const avgColumn = aggregateQry.avg[column],\r\n                            sum = datas[index][\"sum(\" + avgColumn + \")\"],\r\n                            count = datas[index][\"count(\" + avgColumn + \")\"];\r\n                        datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\r\n\r\n                        if (isCountTypeString) {\r\n                            if (aggregateQry.count !== avgColumn) {\r\n                                delete datas[index][\"count(\" + avgColumn + \")\"];\r\n                            }\r\n                            else if (aggregateQry.count.indexOf(avgColumn) === -1) {\r\n                                delete datas[index][\"count(\" + avgColumn + \")\"];\r\n                            }\r\n                        }\r\n\r\n                        if (isSumTypeString) {\r\n                            if (aggregateQry.sum !== avgColumn) {\r\n                                delete datas[index][\"sum(\" + avgColumn + \")\"];\r\n                            }\r\n                            else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\r\n                                delete datas[index][\"sum(\" + avgColumn + \")\"];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.results = datas;\r\n    }\r\n}","import { Like } from \"./like\";\r\n\r\nexport class Where extends Like {\r\n    private executeSkipAndLimitForWhere_() {\r\n        let recordSkipped = false;\r\n        let cursor;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (recordSkipped && this.results.length !== this.limitRecord) {\r\n                        if (this.whereCheckerInstance.check(cursor.value)) {\r\n                            this.results.push(cursor.value);\r\n                        }\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        recordSkipped = true;\r\n                        cursor.advance(this.skipRecord);\r\n                    }\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (recordSkipped && this.results.length !== this.limitRecord) {\r\n                        this.results.push(cursor.value);\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        recordSkipped = true;\r\n                        cursor.advance(this.skipRecord);\r\n                    }\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeSkipForWhere_() {\r\n        let recordSkipped = false,\r\n            cursor;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (recordSkipped) {\r\n                        if (this.whereCheckerInstance.check(cursor.value)) {\r\n                            this.results.push(cursor.value);\r\n                        }\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        recordSkipped = true;\r\n                        cursor.advance(this.skipRecord);\r\n                    }\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (recordSkipped) {\r\n                        this.results.push(cursor.value);\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        recordSkipped = true;\r\n                        cursor.advance(this.skipRecord);\r\n                    }\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeLimitForWhere_() {\r\n        let cursor;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor && this.results.length !== this.limitRecord &&\r\n                    this.whereCheckerInstance.check(cursor.value)) {\r\n                    this.results.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor && this.results.length !== this.limitRecord) {\r\n                    this.results.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeSimpleForWhere_() {\r\n        let cursor;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.whereCheckerInstance.check(cursor.value)) {\r\n                        this.results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    this.results.push(cursor.value);\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected executeWhereLogic(column, value, op, dir) {\r\n        value = op ? value[op] : value;\r\n        this.cursorOpenRequest = this.objectStore.index(column).openCursor(\r\n            this.getKeyRange(value, op),\r\n            dir\r\n        );\r\n\r\n        this.cursorOpenRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n\r\n        if (this.skipRecord && this.limitRecord) {\r\n            this.executeSkipAndLimitForWhere_();\r\n        }\r\n        else if (this.skipRecord) {\r\n            this.executeSkipForWhere_();\r\n        }\r\n        else if (this.limitRecord) {\r\n            this.executeLimitForWhere_();\r\n        }\r\n        else {\r\n            this.executeSimpleForWhere_();\r\n        }\r\n    }\r\n}","import { In } from \"./in\";\r\nimport { OCCURENCE } from \"../../enums\";\r\n\r\nexport class Like extends In {\r\n\r\n    protected executeLikeLogic(column, value: string, symbol: OCCURENCE) {\r\n        this.compValue = value.toLowerCase();\r\n        this.compValueLength = this.compValue.length;\r\n        this.compSymbol = symbol;\r\n        this.cursorOpenRequest = this.objectStore.index(column).openCursor();\r\n        this.cursorOpenRequest.onerror = this.onCursorError;\r\n        if (this.skipRecord && this.limitRecord) {\r\n            this.executeSkipAndLimit_();\r\n        }\r\n        else if (this.skipRecord) {\r\n            this.executeSkip_();\r\n        }\r\n        else if (this.limitRecord) {\r\n            this.executeLimit_();\r\n        }\r\n        else {\r\n            this.executeSimple_();\r\n        }\r\n    }\r\n\r\n    private executeSkipAndLimit_() {\r\n        let cursor: IDBCursorWithValue;\r\n        const skipOrPush = (value) => {\r\n            if (skip === 0) {\r\n                this.results.push(value);\r\n            }\r\n            else {\r\n                --skip;\r\n            }\r\n        };\r\n        let skip = this.skipRecord;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (this.results.length !== this.limitRecord && cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        skipOrPush(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (this.results.length !== this.limitRecord && cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        skipOrPush(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeSkip_() {\r\n        let cursor: IDBCursorWithValue,\r\n            skip = this.skipRecord;\r\n        const skipOrPush = (value) => {\r\n            if (skip === 0) {\r\n                this.results.push(value);\r\n            }\r\n            else {\r\n                --skip;\r\n            }\r\n        };\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        skipOrPush((cursor.value));\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        skipOrPush((cursor.value));\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeLimit_() {\r\n        let cursor: IDBCursorWithValue;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (this.results.length !== this.limitRecord && cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        this.results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (this.results.length !== this.limitRecord && cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        this.results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    private executeSimple_() {\r\n        let cursor: IDBCursorWithValue;\r\n        if (this.checkFlag) {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        this.results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        this.results.push(cursor.value);\r\n                    }\r\n                    cursor.continue();\r\n                } else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}","import { NotWhere } from \"./not_where\";\r\n\r\nexport class In extends NotWhere {\r\n    protected executeInLogic(column, values) {\r\n        if (this.skipRecord && this.limitRecord) {\r\n            this.executeSkipAndLimitForIn_(column, values);\r\n        }\r\n        else if (this.skipRecord) {\r\n            this.executeSkipForIn_(column, values);\r\n        }\r\n        else if (this.limitRecord) {\r\n            this.executeLimitForIn_(column, values);\r\n        }\r\n        else {\r\n            this.executeSimpleForIn_(column, values);\r\n        }\r\n    }\r\n\r\n    private executeSkipAndLimitForIn_(column, values) {\r\n        let cursor: IDBCursorWithValue,\r\n            cursorRequest: IDBRequest,\r\n            skip = this.skipRecord;\r\n        const columnStore = this.objectStore.index(column);\r\n        const skipOrPush = (value) => {\r\n            if (skip === 0) {\r\n                this.results.push(value);\r\n            }\r\n            else {\r\n                --skip;\r\n            }\r\n        };\r\n        const onCursorError = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (this.results.length !== this.limitRecord && cursor) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                skipOrPush(cursor.value);\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (this.results.length !== this.limitRecord && cursor) {\r\n                            skipOrPush(cursor.value);\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeSkipForIn_(column, values) {\r\n        let cursor: IDBCursorWithValue,\r\n            skip = this.skipRecord,\r\n            cursorRequest: IDBRequest;\r\n        const columnStore = this.objectStore.index(column);\r\n        const skipOrPush = (value) => {\r\n            if (skip === 0) {\r\n                this.results.push(value);\r\n            }\r\n            else {\r\n                --skip;\r\n            }\r\n        };\r\n        const onCursorError = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                skipOrPush((cursor.value));\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            skipOrPush((cursor.value));\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeLimitForIn_(column, values) {\r\n        let cursor: IDBCursorWithValue,\r\n            cursorRequest: IDBRequest;\r\n        const columnStore = this.objectStore.index(column);\r\n        const onCursorError = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor && this.results.length !== this.limitRecord) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                this.results.push(cursor.value);\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor && this.results.length !== this.limitRecord) {\r\n                            this.results.push(cursor.value);\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private executeSimpleForIn_(column, values) {\r\n        let cursor: IDBCursorWithValue,\r\n            cursorRequest: IDBRequest;\r\n        const columnStore = this.objectStore.index(column),\r\n            onCursorError = (e) => {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(e);\r\n            };\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                this.results.push(cursor.value);\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e: any) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            this.results.push(cursor.value);\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { BaseSelect } from \"./base_select\";\r\nimport { LogHelper } from \"../../log_helper\";\r\nimport { ERROR_TYPE } from \"../../enums\";\r\n\r\nexport class NotWhere extends BaseSelect {\r\n    protected executeWhereUndefinedLogic() {\r\n        if (this.query.order && this.query.order.by) {\r\n            if (this.objectStore.indexNames.contains(this.query.order.by)) {\r\n                const orderType: IDBCursorDirection = this.query.order.type &&\r\n                    this.query.order.type.toLowerCase() === 'desc' ? 'prev' : 'next';\r\n                this.sorted = true;\r\n                this.cursorOpenRequest = this.objectStore.index(this.query.order.by).\r\n                    openCursor(null, orderType);\r\n            }\r\n            else {\r\n                const error = new LogHelper(ERROR_TYPE.ColumnNotExist, { ColumnName: this.query.order.by });\r\n                error.throw();\r\n            }\r\n        }\r\n        else {\r\n            this.cursorOpenRequest = this.objectStore.openCursor();\r\n        }\r\n\r\n        if (this.skipRecord && this.limitRecord) {\r\n            this.executeSkipAndLimitForNoWhere_();\r\n        }\r\n        else if (this.skipRecord) {\r\n            this.executeSkipForNoWhere_();\r\n        }\r\n        else if (this.limitRecord) {\r\n            this.executeLimitForNotWhere_();\r\n        }\r\n        else {\r\n            this.executeSimpleForNotWhere_();\r\n        }\r\n\r\n        this.cursorOpenRequest.onerror = function (e) {\r\n            this._errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        }.bind(this);\r\n\r\n    }\r\n\r\n    private executeSkipAndLimitForNoWhere_() {\r\n        let recordSkipped = false,\r\n            cursor: IDBCursorWithValue;\r\n        this.cursorOpenRequest.onsuccess = (e) => {\r\n            cursor = (e as any).target.result;\r\n            if (cursor) {\r\n                if (recordSkipped && this.results.length !== this.limitRecord) {\r\n                    this.results.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    recordSkipped = true;\r\n                    cursor.advance(this.skipRecord);\r\n                }\r\n            } else {\r\n                this.onQueryFinished();\r\n            }\r\n        };\r\n    }\r\n\r\n    private executeSkipForNoWhere_() {\r\n        let recordSkipped = false,\r\n            cursor;\r\n        this.cursorOpenRequest.onsuccess = (e: any) => {\r\n            cursor = e.target.result;\r\n            if (cursor) {\r\n                if (recordSkipped) {\r\n                    this.results.push(cursor.value);\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    recordSkipped = true;\r\n                    cursor.advance(this.skipRecord);\r\n                }\r\n            } else {\r\n                this.onQueryFinished();\r\n            }\r\n        };\r\n    }\r\n\r\n    private executeSimpleForNotWhere_() {\r\n        let cursor;\r\n        this.cursorOpenRequest.onsuccess = function (e) {\r\n            cursor = e.target.result;\r\n            if (cursor) {\r\n                this.results.push(cursor.value);\r\n                (cursor as any).continue();\r\n            }\r\n            else {\r\n                this.onQueryFinished();\r\n            }\r\n        }.bind(this);\r\n    }\r\n\r\n    private executeLimitForNotWhere_() {\r\n        let cursor;\r\n        this.cursorOpenRequest.onsuccess = (e: any) => {\r\n            cursor = e.target.result;\r\n            if (cursor && this.results.length !== this.limitRecord) {\r\n                this.results.push(cursor.value);\r\n                cursor.continue();\r\n            } else {\r\n                this.onQueryFinished();\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Base } from \"../base\";\r\nimport { ISelect } from \"../../interfaces\";\r\n\r\nexport class BaseSelect extends Base {\r\n    results = [];\r\n    sorted = false;\r\n    isOr: boolean;\r\n    isArrayQry: boolean;\r\n    onWhereArrayQrySuccess: () => void;\r\n    query: ISelect;\r\n    orInfo: {\r\n        results?: any[];\r\n        orQuery: object\r\n    };\r\n\r\n    protected removeDuplicates() {\r\n        let datas = this.results;\r\n        // free results memory\r\n        this.results = undefined;\r\n        const key = this.getPrimaryKey(this.query.from);\r\n        const lookupObject = {};\r\n        for (const i in datas) {\r\n            lookupObject[datas[i][key]] = datas[i];\r\n        }\r\n        // free datas memory\r\n        datas = [];\r\n        for (const i in lookupObject) {\r\n            datas.push(lookupObject[i]);\r\n        }\r\n        this.results = datas;\r\n    }\r\n\r\n    protected onQueryFinished() {\r\n        // ff\r\n    }\r\n}","import { BaseHelper } from \"./base_helper\";\r\nimport { IError } from \"../interfaces\";\r\nimport { WhereChecker } from \"./where_checker\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { LogHelper } from \"../log_helper\";\r\nimport { ERROR_TYPE, OCCURENCE } from \"../enums\";\r\nimport { Column } from \"../model/column\";\r\nimport { QUERY_OPTION } from \"../enums\";\r\n\r\nexport class Base extends BaseHelper {\r\n    error: IError;\r\n    errorOccured = false;\r\n    errorCount = 0;\r\n    rowAffected = 0;\r\n    onSuccess: (result?) => void;\r\n    onError: (err: IError) => void;\r\n    objectStore: IDBObjectStore;\r\n    query;\r\n    whereCheckerInstance: WhereChecker;\r\n    tableName: string;\r\n    isTransaction: boolean;\r\n    cursorOpenRequest: IDBRequest;\r\n    checkFlag = false;\r\n    skipRecord;\r\n    limitRecord;\r\n\r\n    protected onCursorError = (e) => {\r\n        this.errorOccured = true;\r\n        this.onErrorOccured(e);\r\n    }\r\n\r\n\r\n    protected onErrorOccured(e, customError = false) {\r\n        ++this.errorCount;\r\n        if (this.errorCount === 1) {\r\n            if (customError) {\r\n                e.logError();\r\n                this.onError((e as LogHelper).get());\r\n            }\r\n            else {\r\n                const error = new LogHelper((e as any).target.error.name);\r\n                error.message = (e as any).target.error.message;\r\n                error.logError();\r\n                this.onError(error.get());\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onExceptionOccured(ex: DOMException, info) {\r\n        switch (ex.name) {\r\n            case 'NotFoundError':\r\n                const error = new LogHelper(ERROR_TYPE.TableNotExist, info);\r\n                this.onErrorOccured(error, true);\r\n                break;\r\n            default: console.error(ex);\r\n        }\r\n    }\r\n\r\n    protected getColumnInfo(columnName) {\r\n        let columnInfo: Column;\r\n        this.getTable(this.tableName).columns.every((column) => {\r\n            if (column.name === columnName) {\r\n                columnInfo = column;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return columnInfo;\r\n    }\r\n\r\n    protected addGreatAndLessToNotOp() {\r\n        const whereQuery = this.query.where;\r\n        let value;\r\n        if (this.containsNot(whereQuery)) {\r\n            const queryKeys = Object.keys(whereQuery);\r\n            if (queryKeys.length === 1) {\r\n                queryKeys.forEach((prop) => {\r\n                    value = whereQuery[prop];\r\n                    if (value[QUERY_OPTION.NotEqualTo]) {\r\n                        whereQuery[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\r\n                        if (whereQuery[QUERY_OPTION.Or] === undefined) {\r\n                            whereQuery[QUERY_OPTION.Or] = {};\r\n                            whereQuery[QUERY_OPTION.Or][prop] = {};\r\n                        }\r\n                        else if (whereQuery[QUERY_OPTION.Or][prop] === undefined) {\r\n                            whereQuery[QUERY_OPTION.Or][prop] = {};\r\n                        }\r\n                        whereQuery[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\r\n                        delete whereQuery[prop][QUERY_OPTION.NotEqualTo];\r\n                    }\r\n                });\r\n                this.query.where = whereQuery;\r\n            }\r\n            else {\r\n                const whereTmp = [];\r\n                queryKeys.forEach((prop) => {\r\n                    value = whereQuery[prop];\r\n                    const tmpQry = {};\r\n                    if (value[QUERY_OPTION.NotEqualTo]) {\r\n                        tmpQry[prop] = {};\r\n                        tmpQry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\r\n                        tmpQry[prop][QUERY_OPTION.Or] = {};\r\n                        tmpQry[prop][QUERY_OPTION.Or][prop] = {};\r\n                        tmpQry[prop][QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\r\n                    }\r\n                    else {\r\n                        tmpQry[prop] = value;\r\n                    }\r\n                    whereTmp.push(tmpQry);\r\n                });\r\n                this.query.where = whereTmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected goToWhereLogic = function () {\r\n        const columnName = this.getObjectFirstKey(this.query.where);\r\n        if (this.query.ignoreCase === true) {\r\n            this.query.where = this.makeQryInCaseSensitive(this.query.where);\r\n        }\r\n        if (this.objectStore.indexNames.contains(columnName)) {\r\n            const value = this.query.where[columnName];\r\n            if (typeof value === 'object') {\r\n                this.checkFlag = Boolean(\r\n                    Object.keys(value).length > 1 ||\r\n                    Object.keys(this.query.where).length > 1\r\n                );\r\n                if (this.checkFlag === true) {\r\n                    this.whereCheckerInstance = new WhereChecker(this.query.where);\r\n                }\r\n                const key = this.getObjectFirstKey(value);\r\n                switch (key) {\r\n                    case QUERY_OPTION.Like: {\r\n                        const filterValues = value[QUERY_OPTION.Like].split('%');\r\n                        let filterValue: string,\r\n                            occurence: OCCURENCE;\r\n                        if (filterValues[1]) {\r\n                            filterValue = filterValues[1];\r\n                            occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\r\n                        }\r\n                        else {\r\n                            filterValue = filterValues[0];\r\n                            occurence = OCCURENCE.First;\r\n                        }\r\n                        if (occurence === OCCURENCE.First) {\r\n                            this.getAllCombinationOfWord(filterValue).forEach((item) => {\r\n                                this.executeWhereLogic(columnName,\r\n                                    { '-': { low: item, high: item + '\\uffff' } },\r\n                                    '-');\r\n                            });\r\n                            delete this.query.where[columnName][QUERY_OPTION.Like];\r\n                        }\r\n                        else {\r\n                            this.executeLikeLogic(columnName, filterValue, occurence);\r\n                        }\r\n                    } break;\r\n                    case QUERY_OPTION.In:\r\n                        this.executeInLogic(columnName, value[QUERY_OPTION.In]);\r\n                        break;\r\n                    case QUERY_OPTION.Between:\r\n                    case QUERY_OPTION.GreaterThan:\r\n                    case QUERY_OPTION.LessThan:\r\n                    case QUERY_OPTION.GreaterThanEqualTo:\r\n                    case QUERY_OPTION.LessThanEqualTo:\r\n                        this.executeWhereLogic(columnName, value, key);\r\n                        break;\r\n                    case QUERY_OPTION.Aggregate: break;\r\n                    default: this.executeWhereLogic(columnName, value);\r\n                }\r\n            }\r\n            else {\r\n                this.checkFlag = Boolean(Object.keys(this.query.where).length > 1);\r\n                if (this.checkFlag === true) {\r\n                    this.whereCheckerInstance = new WhereChecker(this.query.where);\r\n                }\r\n                this.executeWhereLogic(columnName, value);\r\n            }\r\n        }\r\n        else {\r\n            this.errorOccured = true;\r\n            const column: Column = this.getColumnInfo(columnName),\r\n                error = column == null ?\r\n                    new LogHelper(ERROR_TYPE.ColumnNotExist, { ColumnName: columnName }) :\r\n                    new LogHelper(ERROR_TYPE.EnableSearchOff, { ColumnName: columnName });\r\n\r\n            this.onErrorOccured(error, true);\r\n        }\r\n    };\r\n\r\n    protected makeQryInCaseSensitive(qry) {\r\n        let results = [];\r\n        let columnValue,\r\n            keyValue;\r\n        for (const column in qry) {\r\n            columnValue = qry[column];\r\n            if (typeof columnValue === 'object') {\r\n                for (const key in columnValue) {\r\n                    keyValue = columnValue[key];\r\n                    switch (key) {\r\n                        case QUERY_OPTION.In:\r\n                            results = results.concat(this.getAllCombinationOfWord(keyValue, true));\r\n                            break;\r\n                        case QUERY_OPTION.Like:\r\n                            break;\r\n                        default:\r\n                            results = results.concat(this.getAllCombinationOfWord(keyValue));\r\n                    }\r\n                }\r\n                qry[column][QUERY_OPTION.In] = results;\r\n            }\r\n            else {\r\n                results = results.concat(this.getAllCombinationOfWord(columnValue));\r\n                qry[column] = {};\r\n                qry[column][QUERY_OPTION.In] = results;\r\n            }\r\n        }\r\n        return qry;\r\n    }\r\n}","import { OCCURENCE, DATA_TYPE } from \"../enums\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { Table } from \"../model/table\";\r\nimport { QUERY_OPTION } from \"../enums\";\r\nimport { Util } from \"../util\";\r\nimport { DataBase } from \"../model/database\";\r\n\r\nexport class BaseHelper {\r\n    compSymbol: OCCURENCE;\r\n    compValue;\r\n    compValueLength: number;\r\n    // static method helpers\r\n\r\n    protected get activeDb(): DataBase {\r\n        return IdbHelper.activeDb;\r\n    }\r\n\r\n    protected get dbConnection() {\r\n        return IdbHelper.dbConnection;\r\n    }\r\n\r\n    protected getObjectFirstKey(value: object) {\r\n        return Util.getObjectFirstKey(value);\r\n    }\r\n\r\n    protected isNull(value) {\r\n        return Util.isNull(value);\r\n    }\r\n\r\n    protected getType(value) {\r\n        return Util.getType(value);\r\n    }\r\n\r\n    protected get transaction() {\r\n        return IdbHelper.transaction;\r\n    }\r\n\r\n    protected createTransaction(tableNames: string[], callBack: () => void, mode?) {\r\n        IdbHelper.createTransaction(tableNames, callBack);\r\n    }\r\n\r\n    protected containsNot(whereQry: object) {\r\n        let status = false;\r\n        let value;\r\n        Object.keys(whereQry).every((key) => {\r\n            value = whereQry[key];\r\n            if (value['!=']) {\r\n                status = true;\r\n            }\r\n            return !status;\r\n        });\r\n        return status;\r\n    }\r\n\r\n    protected filterOnOccurence(value) {\r\n        let found = false;\r\n        value = value.toLowerCase();\r\n        switch (this.compSymbol) {\r\n            case OCCURENCE.Any: if (value.indexOf(this.compValue) >= 0) {\r\n                found = true;\r\n            } break;\r\n            case OCCURENCE.First: if (value.indexOf(this.compValue) === 0) {\r\n                found = true;\r\n            } break;\r\n            case OCCURENCE.Last:\r\n                if (value.lastIndexOf(this.compValue) === value.length - this.compValueLength) {\r\n                    found = true;\r\n                } break;\r\n            default: if (value !== this.compValue) {\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    protected isTableExist(tableName: string) {\r\n        let isExist = false;\r\n        this.activeDb.tables.every((table) => {\r\n            if (table.name === tableName) {\r\n                isExist = true;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return isExist;\r\n    }\r\n\r\n    protected getTable(tableName: string) {\r\n        let currentTable: Table;\r\n        this.activeDb.tables.every((table) => {\r\n            if (table.name === tableName) {\r\n                currentTable = table;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return currentTable;\r\n    }\r\n\r\n    protected getKeyRange(value, op) {\r\n        let keyRange: IDBKeyRange;\r\n        switch (op) {\r\n            case QUERY_OPTION.Between: keyRange = IDBKeyRange.bound(value.low, value.high, false, false); break;\r\n            case QUERY_OPTION.GreaterThan: keyRange = IDBKeyRange.lowerBound(value, true); break;\r\n            case QUERY_OPTION.GreaterThanEqualTo: keyRange = IDBKeyRange.lowerBound(value); break;\r\n            case QUERY_OPTION.LessThan: keyRange = IDBKeyRange.upperBound(value, true); break;\r\n            case QUERY_OPTION.LessThanEqualTo: keyRange = IDBKeyRange.upperBound(value); break;\r\n            default: keyRange = IDBKeyRange.only(value); break;\r\n        }\r\n        return keyRange;\r\n    }\r\n\r\n    protected getPrimaryKey(tableName): string {\r\n        const primaryKey: string = this.getTable(tableName).primaryKey;\r\n        return primaryKey ? primaryKey : this.getKeyPath(tableName);\r\n    }\r\n\r\n    protected getKeyPath(tableName) {\r\n        const transaction: IDBTransaction = this.dbConnection.transaction([tableName], \"readonly\"),\r\n            objectStore = transaction.objectStore(tableName);\r\n        return objectStore.keyPath as string;\r\n    }\r\n\r\n    protected getAllCombinationOfWord(word: string, isArray?: boolean) {\r\n        if (isArray) {\r\n            let results = [];\r\n            for (let i = 0, length = word.length; i < length; i++) {\r\n                results = results.concat(this.getCombination_(word[i]));\r\n            }\r\n            return results;\r\n        }\r\n        else {\r\n            return this.getCombination_(word);\r\n        }\r\n    }\r\n\r\n    private getCombination_(word: string) {\r\n        const results = [];\r\n        const doAndPushCombination = (subWord: string, chars, index: number) => {\r\n            if (index === subWord.length) {\r\n                results.push(chars.join(\"\"));\r\n            } else {\r\n                const ch = subWord.charAt(index);\r\n                chars[index] = ch.toLowerCase();\r\n                doAndPushCombination(subWord, chars, index + 1);\r\n                chars[index] = ch.toUpperCase();\r\n                doAndPushCombination(subWord, chars, index + 1);\r\n            }\r\n        };\r\n        doAndPushCombination(word, [], 0);\r\n        return results;\r\n    }\r\n}","import { DATA_TYPE } from \"./enums\";\r\n\r\nexport class Util {\r\n    static isNull(value) {\r\n        if (value == null) {\r\n            return true;\r\n        } else {\r\n            switch (typeof value) {\r\n                case 'string': return value.length === 0;\r\n                case 'number': return isNaN(value);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static getObjectFirstKey(value) {\r\n        for (const key in value) {\r\n            return key;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *  get data type of supplied value\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof Util\r\n     */\r\n    static getType(value) {\r\n        if (value === null) {\r\n            return DATA_TYPE.Null;\r\n        }\r\n        const type = typeof value;\r\n        switch (type) {\r\n            case 'object':\r\n                if (Array.isArray(value)) {\r\n                    return DATA_TYPE.Array;\r\n                }\r\n                else if (value.getDate && value.getTime) {\r\n                    return DATA_TYPE.DateTime;\r\n                }\r\n            default:\r\n                return type;\r\n        }\r\n    }\r\n\r\n}","import { OCCURENCE, QUERY_OPTION } from \"../enums\";\r\n\r\n/**\r\n * For matching the different column value existance for where option\r\n * \r\n * @export\r\n * @class WhereChecker\r\n */\r\nexport class WhereChecker {\r\n  where: object;\r\n  status: boolean;\r\n\r\n  constructor(where: object) {\r\n    this.where = where;\r\n  }\r\n\r\n  check(rowValue) {\r\n    this.status = true;\r\n    let columnValue;\r\n    for (const columnName in this.where) {\r\n      if (this.status) {\r\n        columnValue = this.where[columnName];\r\n        if (typeof columnValue === 'object') {\r\n          for (const key in columnValue) {\r\n            if (this.status) {\r\n              switch (key) {\r\n                case QUERY_OPTION.In: this.checkIn(columnName, rowValue[columnName]); break;\r\n                case QUERY_OPTION.Like: this.checkLike(columnName, rowValue[columnName]); break;\r\n                case QUERY_OPTION.Between:\r\n                case QUERY_OPTION.GreaterThan:\r\n                case QUERY_OPTION.LessThan:\r\n                case QUERY_OPTION.GreaterThanEqualTo:\r\n                case QUERY_OPTION.LessThanEqualTo:\r\n                case QUERY_OPTION.NotEqualTo:\r\n                  this.checkComparisionOp(columnName, rowValue[columnName], key);\r\n                  break;\r\n              }\r\n            }\r\n            else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (columnValue !== rowValue[columnName]) {\r\n            this.status = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    return this.status;\r\n  }\r\n\r\n  private checkIn(column, value) {\r\n    for (let i = 0, values = this.where[column][QUERY_OPTION.In], length = values.length; i < length; i++) {\r\n      if (values[i] === value) {\r\n        this.status = true;\r\n        break;\r\n      }\r\n      else {\r\n        this.status = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkLike(column, value) {\r\n    const values = this.where[column][QUERY_OPTION.Like].split('%');\r\n    let compSymbol: OCCURENCE,\r\n      compValue,\r\n      symbolIndex;\r\n    if (values[1]) {\r\n      compValue = values[1];\r\n      compSymbol = values.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\r\n    }\r\n    else {\r\n      compValue = values[0];\r\n      compSymbol = OCCURENCE.First;\r\n    }\r\n    value = value.toLowerCase();\r\n\r\n    switch (compSymbol) {\r\n      case OCCURENCE.Any:\r\n        symbolIndex = value.indexOf(compValue.toLowerCase());\r\n        if (symbolIndex < 0) {\r\n          this.status = false;\r\n        } break;\r\n      case OCCURENCE.First:\r\n        symbolIndex = value.indexOf(compValue.toLowerCase());\r\n        if (symbolIndex > 0 || symbolIndex < 0) {\r\n          this.status = false;\r\n        } break;\r\n      default:\r\n        symbolIndex = value.lastIndexOf(compValue.toLowerCase());\r\n        if (symbolIndex < value.length - compValue.length) {\r\n          this.status = false;\r\n        }\r\n    }\r\n  }\r\n\r\n  private checkComparisionOp(column, value, symbol) {\r\n    const compareValue = this.where[column][symbol];\r\n    switch (symbol) {\r\n      // greater than\r\n      case QUERY_OPTION.GreaterThan: if (value <= compareValue) {\r\n        this.status = false;\r\n      } break;\r\n      // less than\r\n      case QUERY_OPTION.LessThan: if (value >= compareValue) {\r\n        this.status = false;\r\n      } break;\r\n      // less than equal\r\n      case QUERY_OPTION.LessThanEqualTo: if (value > compareValue) {\r\n        this.status = false;\r\n      } break;\r\n      // greather than equal\r\n      case QUERY_OPTION.GreaterThanEqualTo: if (value < compareValue) {\r\n        this.status = false;\r\n      } break;\r\n      // between\r\n      case QUERY_OPTION.Between: if (value < compareValue.Low || value > compareValue.High) {\r\n        this.status = false;\r\n      } break;\r\n      // Not equal to\r\n      case QUERY_OPTION.NotEqualTo: if (value === compareValue) {\r\n        this.status = false;\r\n      } break;\r\n    }\r\n  }\r\n}","import { BaseSelect } from \"./base_select\";\r\nimport { ISelectJoin, ITableJoin, IError, IJoin, ISelect } from \"../../interfaces\";\r\nimport * as Select from './instance';\r\nimport { QUERY_OPTION } from \"../../enums\";\r\n\r\nexport class Join extends BaseSelect {\r\n    query: ISelectJoin;\r\n    queryStack: ITableJoin[] = [];\r\n    currentQueryStackIndex = 0;\r\n\r\n    constructor(query: ISelectJoin, onSuccess: (results: any[]) => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n        this.query = query;\r\n        const tableList = []; // used to open the multiple object store\r\n\r\n        const convertQueryIntoStack = (qry: IJoin) => {\r\n            if (qry.table1 !== undefined) {\r\n                qry.table2['joinType'] = qry.join === undefined ? 'inner' : qry.join.toLowerCase();\r\n                this.queryStack.push(qry.table2);\r\n                if (this.queryStack.length % 2 === 0) {\r\n                    this.queryStack[this.queryStack.length - 1].nextJoin = (qry as any).nextJoin;\r\n                }\r\n                tableList.push(qry.table2.table);\r\n                return convertQueryIntoStack(qry.table1 as any);\r\n            }\r\n            else {\r\n                this.queryStack.push(qry as any);\r\n                tableList.push((qry as any).table);\r\n                return;\r\n            }\r\n        };\r\n        convertQueryIntoStack(query.from);\r\n        this.queryStack.reverse();\r\n        // get the data for first table\r\n        if (!this.errorOccured) {\r\n            const selectObject = new Select.Instance({\r\n                from: this.queryStack[0].table,\r\n                where: this.queryStack[0].where\r\n            } as ISelect, (results) => {\r\n                const tableName = this.queryStack[0].table;\r\n                results.forEach((item, index) => {\r\n                    this.results[index] = {};\r\n                    this.results[index][tableName] = item;\r\n                });\r\n                this.startExecutionJoinLogic_();\r\n            }, this.onErrorOccured);\r\n            selectObject.execute();\r\n        }\r\n    }\r\n\r\n    private onTransactionCompleted_(e) {\r\n        if (this.onSuccess != null && (this.queryStack.length === this.currentQueryStackIndex + 1)) {\r\n            if (this.query[QUERY_OPTION.Count]) {\r\n                this.onSuccess(this.results.length);\r\n            }\r\n            else {\r\n                if (this.query[QUERY_OPTION.Skip] && this.query[QUERY_OPTION.Limit]) {\r\n                    this.results.splice(0, this.query[QUERY_OPTION.Skip]);\r\n                    this.results.splice(this.query[QUERY_OPTION.Limit] - 1, this.results.length);\r\n                }\r\n                else if (this.query[QUERY_OPTION.Skip]) {\r\n                    this.results.splice(0, this.query[QUERY_OPTION.Skip]);\r\n                }\r\n                else if (this.query[QUERY_OPTION.Limit]) {\r\n                    this.results.splice(this.query[QUERY_OPTION.Limit] - 1, this.results.length);\r\n                }\r\n                this.onSuccess(this.results);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private executeWhereJoinLogic_(joinQuery: ITableJoin, query: ITableJoin) {\r\n        const results = [],\r\n            column = query.column,\r\n            tmpresults = this.results,\r\n            resultLength = tmpresults.length;\r\n        let item, joinIndex = 0;\r\n\r\n        // get the data from query table\r\n        const selectObject = new Select.Instance({\r\n            from: query.table,\r\n            order: query.order,\r\n            where: query.where\r\n        } as ISelect, (selectResults) => {\r\n            // perform join\r\n            selectResults.forEach((value, index) => {\r\n                // search item through each global result\r\n                for (let i = 0; i < resultLength; i++) {\r\n                    item = tmpresults[i][joinQuery.table][joinQuery.column];\r\n                    doJoin(item, value, i);\r\n                }\r\n            });\r\n            this.results = results;\r\n            // check if further execution needed\r\n            if (this.queryStack.length > this.currentQueryStackIndex + 1) {\r\n                this.startExecutionJoinLogic_();\r\n            }\r\n            else {\r\n                this.onTransactionCompleted_(null);\r\n            }\r\n\r\n        }, this.onErrorOccured);\r\n        selectObject.execute();\r\n\r\n        const doJoin = (value1, value2, itemIndex) => {\r\n            results[joinIndex] = {};\r\n            if (value1 === value2[query.column]) {\r\n                results[joinIndex][query.table] = value2;\r\n                // copy other relative data into current result\r\n                for (let j = 0; j < this.currentQueryStackIndex; j++) {\r\n                    results[joinIndex][this.queryStack[j].table] =\r\n                        tmpresults[itemIndex][this.queryStack[j].table];\r\n                }\r\n                ++joinIndex;\r\n            }\r\n            else if (query.joinType === 'left') {\r\n                // left join\r\n                results[joinIndex] = {};\r\n                results[joinIndex][query.table] = null;\r\n                // copy other relative data into current result\r\n                for (let j = 0; j < this.currentQueryStackIndex; j++) {\r\n                    results[joinIndex][this.queryStack[j].table] =\r\n                        tmpresults[itemIndex][this.queryStack[j].table];\r\n                }\r\n                ++joinIndex;\r\n            }\r\n        };\r\n    }\r\n\r\n    private executeRightJoin_(joinQuery: ITableJoin, query: ITableJoin) {\r\n        const joinresults = [],\r\n            joinIndex = 0,\r\n            column = query.column,\r\n            tmpresults = this.results,\r\n            resultLength = tmpresults.length,\r\n            where = {};\r\n\r\n        let itemIndex = 0;\r\n\r\n        const onExecutionFinished = () => {\r\n            this.results = joinresults;\r\n            // check if further execution needed\r\n            if (this.queryStack.length > this.currentQueryStackIndex + 1) {\r\n                this.startExecutionJoinLogic_();\r\n            }\r\n            else {\r\n                this.onTransactionCompleted_(null);\r\n            }\r\n        };\r\n        const doRightJoin = (results) => {\r\n            let valueFound = false;\r\n            results.forEach(function (item, index) {\r\n                for (itemIndex = 0; itemIndex < resultLength; itemIndex++) {\r\n                    if (item[query.column] ===\r\n                        tmpresults[itemIndex][joinQuery.table][joinQuery.column]) {\r\n                        valueFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                joinresults[index] = {};\r\n                joinresults[index][query.table] = item;\r\n                if (valueFound) {\r\n                    valueFound = false;\r\n                    for (let j = 0; j < this.currentQueryStackIndex; j++) {\r\n                        joinresults[index][this.queryStack[j].table] =\r\n                            tmpresults[itemIndex][this.queryStack[j].table];\r\n                    }\r\n                }\r\n                else {\r\n                    for (let j = 0; j < this.currentQueryStackIndex; j++) {\r\n                        joinresults[index][this.queryStack[j].table] = null;\r\n                    }\r\n                }\r\n            }, this);\r\n        };\r\n        const executeLogic = () => {\r\n            const selectObject = new Select.Instance({\r\n                from: query.table,\r\n                order: query.order,\r\n                where: query.where\r\n            } as ISelect, (results) => {\r\n                doRightJoin(results);\r\n                onExecutionFinished();\r\n            }, this.onErrorOccured);\r\n            selectObject.execute();\r\n        };\r\n        executeLogic();\r\n    }\r\n\r\n    private executeWhereUndefinedLogicForJoin_(joinQuery: ITableJoin, query: ITableJoin) {\r\n        const joinresults = [],\r\n            column = query.column,\r\n            tmpresults = this.results,\r\n            where = {},\r\n            // Item,\r\n            resultLength = tmpresults.length;\r\n\r\n        let joinIndex = 0,\r\n            itemIndex = 0;\r\n        const onExecutionFinished = () => {\r\n            this.results = joinresults;\r\n            // check if further execution needed\r\n            if (this.queryStack.length > this.currentQueryStackIndex + 1) {\r\n                this.startExecutionJoinLogic_();\r\n            }\r\n            else {\r\n                this.onTransactionCompleted_(null);\r\n            }\r\n        };\r\n        const doJoin = (results) => {\r\n            if (results.length > 0) {\r\n                results.forEach((value) => {\r\n                    joinresults[joinIndex] = {};\r\n                    joinresults[joinIndex][query.table] = value;\r\n                    // copy other relative data into current result\r\n                    for (let k = 0; k < this.currentQueryStackIndex; k++) {\r\n                        joinresults[joinIndex][this.queryStack[k].table] =\r\n                            tmpresults[itemIndex][this.queryStack[k].table];\r\n                    }\r\n                    ++joinIndex;\r\n                });\r\n            }\r\n            else if (query.joinType === 'left') {\r\n                // left join\r\n                joinresults[joinIndex] = {};\r\n                joinresults[joinIndex][query.table] = null;\r\n                // copy other relative data into current result\r\n                for (let j = 0; j < this.currentQueryStackIndex; j++) {\r\n                    joinresults[joinIndex][this.queryStack[j].table] =\r\n                        tmpresults[itemIndex][this.queryStack[j].table];\r\n                }\r\n                ++joinIndex;\r\n            }\r\n        };\r\n        const executeLogic = () => {\r\n            if (itemIndex < resultLength) {\r\n                if (!this.errorOccured) {\r\n                    where[query.column] = tmpresults[itemIndex][joinQuery.table][joinQuery.column];\r\n                    const selectInstance = new Select.Instance({\r\n                        from: query.table,\r\n                        order: query.order,\r\n                        where: where\r\n                    } as ISelect, (results) => {\r\n                        doJoin(results);\r\n                        ++itemIndex;\r\n                        executeLogic();\r\n                    }, this.onErrorOccured.bind(this));\r\n                    selectInstance.execute();\r\n                }\r\n            }\r\n            else {\r\n                onExecutionFinished();\r\n            }\r\n        };\r\n        executeLogic();\r\n    }\r\n\r\n    private startExecutionJoinLogic_() {\r\n        let joinQuery;\r\n        if (this.currentQueryStackIndex >= 1 && this.currentQueryStackIndex % 2 === 1) {\r\n            joinQuery = {\r\n                column: this.queryStack[this.currentQueryStackIndex].nextJoin.column,\r\n                table: this.queryStack[this.currentQueryStackIndex].nextJoin.table\r\n            } as ITableJoin;\r\n            this.currentQueryStackIndex++;\r\n        }\r\n        else {\r\n            joinQuery = this.queryStack[this.currentQueryStackIndex++];\r\n        }\r\n\r\n        const query = this.queryStack[this.currentQueryStackIndex];\r\n        if (query.joinType === 'right') {\r\n            this.executeRightJoin_(joinQuery, query);\r\n        }\r\n        else if (query.where) {\r\n            this.executeWhereJoinLogic_(joinQuery, query);\r\n        }\r\n        else {\r\n            this.executeWhereUndefinedLogicForJoin_(joinQuery, query);\r\n        }\r\n    }\r\n}","export * from './instance';","import { Where } from \"./where\";\r\nimport { ICount, IError } from \"../../interfaces\";\r\nimport * as Select from '../select/index';\r\nimport { LogHelper } from \"../../log_helper\";\r\nimport { ERROR_TYPE, IDB_MODE } from \"../../enums\";\r\nimport { IdbHelper } from '../idb_helper';\r\n\r\nexport class Instance extends Where {\r\n\r\n    constructor(query: ICount, onSuccess: (noOfRecord: number) => void, onError: (error: IError) => void) {\r\n        super();\r\n        this.onError = onError;\r\n        this.onSuccess = onSuccess;\r\n        this.query = query;\r\n    }\r\n\r\n    execute() {\r\n        if (this.isTableExist(this.query.from)) {\r\n            try {\r\n                if (this.query.where !== undefined) {\r\n                    this.addGreatAndLessToNotOp();\r\n                    if (this.query.where.or || Array.isArray(this.query.where)) {\r\n                        const selectInstance = new Select.Instance(this.query as any,\r\n                            (results) => {\r\n                                this.resultCount = results.length;\r\n                                this.onTransactionCompleted_();\r\n                            }, this.onError);\r\n                        selectInstance.execute();\r\n                    }\r\n                    else {\r\n                        this.initTransaction_();\r\n                        this.goToWhereLogic();\r\n                    }\r\n                }\r\n                else {\r\n                    this.initTransaction_();\r\n                    this.executeWhereUndefinedLogic();\r\n                }\r\n            }\r\n            catch (ex) {\r\n                this.onExceptionOccured(ex, { TableName: this.query.from });\r\n            }\r\n        }\r\n        else {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(\r\n                new LogHelper(ERROR_TYPE.TableNotExist, { TableName: this.query.from }),\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    private initTransaction_() {\r\n        this.createTransaction([this.query.from], this.onTransactionCompleted_, IDB_MODE.ReadOnly);\r\n        this.objectStore = this.transaction.objectStore(this.query.from);\r\n    }\r\n}","import { Like } from \"./like\";\r\n\r\nexport class Where extends Like {\r\n    protected executeWhereLogic(column, value, op) {\r\n        value = op ? value[op] : value;\r\n        let cursorRequest,\r\n            cursor: IDBCursorWithValue;\r\n        if (this.checkFlag) {\r\n            cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\r\n            cursorRequest.onsuccess = (e) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.whereCheckerInstance.check(cursor.value)) {\r\n                        ++this.resultCount;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            if (this.objectStore.count) {\r\n                cursorRequest = this.objectStore.index(column).count(this.getKeyRange(value, op));\r\n                cursorRequest.onsuccess = () => {\r\n                    this.resultCount = cursorRequest.result;\r\n                    this.onQueryFinished();\r\n                };\r\n            }\r\n            else {\r\n                cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\r\n                cursorRequest.onsuccess = (e) => {\r\n                    cursor = e.target.result;\r\n                    if (cursor) {\r\n                        ++this.resultCount;\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        this.onQueryFinished();\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}","import { In } from \"./in\";\r\nimport { OCCURENCE } from \"../../enums\";\r\n\r\nexport class Like extends In {\r\n\r\n    protected executeLikeLogic(column, value, symbol: OCCURENCE) {\r\n        let cursor: IDBCursorWithValue;\r\n        this.compValue = (value as string).toLowerCase();\r\n        this.compValueLength = this.compValue.length;\r\n        this.compSymbol = symbol;\r\n        const cursorRequest = this.objectStore.index(column).openCursor();\r\n        cursorRequest.onerror = this.onCursorError;\r\n        if (this.checkFlag) {\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        ++this.resultCount;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        ++this.resultCount;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}","import { NotWhere } from \"./not_where\";\r\n\r\nexport class In extends NotWhere {\r\n    private executeInLogic(column, values) {\r\n        let cursor: IDBCursorWithValue, cursorRequest;\r\n        const columnStore = this.objectStore.index(column);\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                cursorRequest.onsuccess = (e) => {\r\n                    cursor = e.target.result;\r\n                    if (cursor) {\r\n                        if (this.whereCheckerInstance.check(cursor.value)) {\r\n                            ++this.resultCount;\r\n                        }\r\n                        cursor.continue();\r\n                    }\r\n                    else if (i + 1 === length) {\r\n                        this.onQueryFinished();\r\n                    }\r\n                };\r\n                cursorRequest.onerror = this.onCursorError;\r\n            }\r\n        }\r\n        else {\r\n            if (this.objectStore.count) {\r\n                for (let i = 0, length = values.length; i < length; i++) {\r\n                    cursorRequest = columnStore.count(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        this.resultCount += e.target.result;\r\n                        if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = this.onCursorError;\r\n                }\r\n            }\r\n            else {\r\n                for (let i = 0, length = values.length; i < length; i++) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            ++this.resultCount;\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = this.onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { BaseCount } from \"./base_count\";\r\n\r\nexport class NotWhere extends BaseCount {\r\n    protected executeWhereUndefinedLogic() {\r\n        if (this.objectStore.count) {\r\n            const countRequest = this.objectStore.count();\r\n            countRequest.onsuccess = () => {\r\n                this.resultCount = countRequest.result;\r\n                this.onQueryFinished();\r\n            };\r\n            countRequest.onerror = this.onCursorError;\r\n        }\r\n        else {\r\n            let cursor;\r\n            const cursorRequest = this.objectStore.openCursor();\r\n            cursorRequest.onsuccess = function (e) {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    ++this._resultCount;\r\n                    (cursor as any).continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            }.bind(this);\r\n            cursorRequest.onerror = this.onCursorError;\r\n        }\r\n    }\r\n}\r\n","import { Base } from \"../base\";\r\nimport { ICount } from \"../../interfaces\";\r\n\r\nexport class BaseCount extends Base {\r\n    resultCount = 0;\r\n    query: ICount;\r\n\r\n    protected onQueryFinished() {\r\n        if (this.isTransaction === true) {\r\n            this.onTransactionCompleted_();\r\n        }\r\n    }\r\n\r\n    protected onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.resultCount);\r\n        }\r\n    }\r\n}\r\n","export * from './instance';","import { Base } from \"../base\";\r\nimport { IInsert, IError } from \"../../interfaces\";\r\nimport { Table } from \"../../model/table\";\r\nimport { ERROR_TYPE } from \"../../enums\";\r\nimport { LogHelper } from \"../../log_helper\";\r\nimport { ValuesChecker } from \"./values_checker\";\r\nimport { IdbHelper } from '../idb_helper';\r\n\r\nexport class Instance extends Base {\r\n    _valuesAffected = [];\r\n    query: IInsert;\r\n    _table: Table;\r\n\r\n    constructor(query: IInsert, onSuccess: (rowsInserted: number) => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.onError = onError;\r\n        this.query = query;\r\n        this.onSuccess = onSuccess;\r\n        this.tableName = this.query.into;\r\n    }\r\n\r\n    execute() {\r\n        const table = this.getTable(this.tableName);\r\n        if (!Array.isArray(this.query.values)) {\r\n            this.onErrorOccured(\r\n                new LogHelper(ERROR_TYPE.NotArray),\r\n                true\r\n            );\r\n        }\r\n        else if (table) {\r\n            try {\r\n                if (this.query.skipDataCheck) {\r\n                    this.insertData(this.query.values);\r\n                }\r\n                else {\r\n                    let valueCheckerInstance = new ValuesChecker(table, this.query.values);\r\n                    valueCheckerInstance.checkAndModifyValues((isError) => {\r\n                        if (isError) {\r\n                            this.onErrorOccured(valueCheckerInstance.error, true);\r\n                        }\r\n                        else {\r\n                            this.insertData(valueCheckerInstance.values);\r\n                        }\r\n                        valueCheckerInstance = undefined;\r\n                    });\r\n                }\r\n                // remove values from query\r\n                this.query.values = undefined;\r\n            }\r\n            catch (ex) {\r\n                this.onExceptionOccured(ex, { TableName: this.tableName });\r\n            }\r\n        }\r\n        else {\r\n            new LogHelper(ERROR_TYPE.TableNotExist, { TableName: this.tableName }).throw();\r\n        }\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.query.return ? this._valuesAffected : this.rowAffected);\r\n        }\r\n    }\r\n\r\n    private onQueryFinished() {\r\n        if (this.isTransaction === true) {\r\n            this.onTransactionCompleted_();\r\n        }\r\n    }\r\n\r\n    private insertData(values) {\r\n        let valueIndex = 0,\r\n            insertDataIntoTable: (value: object) => void;\r\n        if (this.query.return) {\r\n            insertDataIntoTable = (value) => {\r\n                if (value) {\r\n                    const addResult = objectStore.add(value);\r\n                    addResult.onerror = this.onErrorOccured.bind(this);\r\n                    addResult.onsuccess = (e) => {\r\n                        this._valuesAffected.push(value);\r\n                        insertDataIntoTable.call(this, values[valueIndex++]);\r\n                    };\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            insertDataIntoTable = (value) => {\r\n                if (value) {\r\n                    const addResult = objectStore.add(value);\r\n                    addResult.onerror = this.onErrorOccured.bind(this);\r\n                    addResult.onsuccess = (e) => {\r\n                        ++this.rowAffected;\r\n                        insertDataIntoTable.call(this, values[valueIndex++]);\r\n                    };\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        this.createTransaction([this.query.into], this.onTransactionCompleted_);\r\n        const objectStore = this.transaction.objectStore(this.query.into);\r\n        insertDataIntoTable(values[valueIndex++]);\r\n    }\r\n}","import { Table } from \"../../model/table\";\r\nimport { IError } from \"../../interfaces\";\r\nimport { ValueChecker } from \"./value_checker\";\r\nimport { IdbHelper } from \"../../index\";\r\nimport * as KeyStore from \"../../keystore/index\";\r\n\r\nexport class ValuesChecker {\r\n    table: Table;\r\n    values: object[];\r\n    error: IError;\r\n    onFinish: (isError: boolean) => void;\r\n    valueCheckerObj: ValueChecker;\r\n\r\n    constructor(table: Table, values: object[]) {\r\n        this.table = table;\r\n        this.values = values;\r\n    }\r\n\r\n    checkAndModifyValues(onFinish: (isError: boolean) => void) {\r\n        this.onFinish = onFinish;\r\n        const autoIncColumns = this.table.columns.filter((col) => {\r\n            return col.autoIncrement;\r\n        });\r\n        const autoIncValues = {};\r\n        autoIncColumns.forEach((column) => {\r\n            const autoIncrementKey = `JsStore_${IdbHelper.activeDb.name}_${this.table.name}_${column.name}_Value`;\r\n            KeyStore.get(autoIncrementKey, (val) => {\r\n                autoIncValues[column.name] = val;\r\n            });\r\n        });\r\n        KeyStore.get('dumy_key', (val) => {\r\n            this.valueCheckerObj = new ValueChecker(this.table, autoIncValues);\r\n            this.startChecking();\r\n        }, (err) => {\r\n            this.error = err as any;\r\n            this.onFinish(true);\r\n        });\r\n\r\n    }\r\n\r\n    private startChecking() {\r\n        let isError = false;\r\n        this.values.every((item) => {\r\n            isError = this.valueCheckerObj.checkAndModifyValue(item);\r\n            return !isError;\r\n        });\r\n        if (isError) {\r\n            this.error = this.valueCheckerObj.error;\r\n            this.onFinish(true);\r\n        }\r\n        else {\r\n            for (const prop of Object.keys(this.valueCheckerObj.autoIncrementValue)) {\r\n                const autoIncrementKey = `JsStore_${IdbHelper.activeDb.name}_${this.table.name}_${prop}_Value`;\r\n                KeyStore.set(autoIncrementKey, this.valueCheckerObj.autoIncrementValue[prop]);\r\n            }\r\n            KeyStore.get('dumy_key', (val) => {\r\n                this.onFinish(false);\r\n            },\r\n                (err) => {\r\n                    this.error = err as any;\r\n                    this.onFinish(true);\r\n                });\r\n        }\r\n    }\r\n}","import { Table } from \"../../model/table\";\r\nimport { IError } from \"../../interfaces\";\r\nimport { Column } from \"../../model/column\";\r\nimport { Util } from \"../../util\";\r\nimport { ERROR_TYPE } from \"../../enums\";\r\nimport { LogHelper } from \"../../log_helper\";\r\n\r\nexport class ValueChecker {\r\n    table: Table;\r\n    value: object;\r\n    errorOccured = false;\r\n    error: IError;\r\n    autoIncrementValue = {};\r\n\r\n    constructor(table: Table, autoIncrementValue) {\r\n        this.table = table;\r\n        this.autoIncrementValue = autoIncrementValue;\r\n    }\r\n\r\n    checkAndModifyValue(value) {\r\n        this.value = value;\r\n        this.table.columns.every((column) => {\r\n            this.checkAndModifyColumnValue_(column);\r\n            return !this.errorOccured;\r\n        });\r\n        return this.errorOccured;\r\n    }\r\n\r\n    private isNull_(value) {\r\n        return Util.isNull(value);\r\n    }\r\n\r\n    private getType_(value) {\r\n        return Util.getType(value);\r\n    }\r\n\r\n    private checkNotNullAndDataType_(column: Column) {\r\n        // check not null schema\r\n        if (column.notNull && this.isNull_(this.value[column.name])) {\r\n            this.onValidationError_(ERROR_TYPE.NullValue, { ColumnName: column.name });\r\n        }\r\n        // check datatype\r\n        else if (column.dataType && !this.isNull_(this.value[column.name]) &&\r\n            this.getType_(this.value[column.name]) !== column.dataType) {\r\n            this.onValidationError_(ERROR_TYPE.BadDataType, { ColumnName: column.name });\r\n        }\r\n    }\r\n\r\n    private checkAndModifyColumnValue_(column: Column) {\r\n        // check auto increment scheme\r\n        if (column.autoIncrement) {\r\n            this.value[column.name] = ++this.autoIncrementValue[column.name];\r\n        }\r\n        // check Default Schema\r\n        else if (column.default && this.isNull_(this.value[column.name])) {\r\n            this.value[column.name] = column.default;\r\n        }\r\n        this.checkNotNullAndDataType_(column);\r\n    }\r\n\r\n    private onValidationError_(error: ERROR_TYPE, details: object) {\r\n        this.errorOccured = true;\r\n        this.error = new LogHelper(error, details);\r\n    }\r\n}","export * from './instance';","import { Where } from \"./where\";\r\nimport { IRemove, IError } from \"../../interfaces\";\r\nimport * as Select from '../select/index';\r\nimport { QUERY_OPTION } from \"../../enums\";\r\n\r\nexport class Instance extends Where {\r\n    \r\n\r\n    constructor(\r\n        query: IRemove, onSuccess: (recordRemoved: number) => void,\r\n        onError: (err: IError) => void\r\n    ) {\r\n        super();\r\n        this.query = query;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n\r\n    execute() {\r\n        try {\r\n            if (this.query.where !== undefined) {\r\n                this.addGreatAndLessToNotOp();\r\n                this.initTransaction_();\r\n                if (Array.isArray(this.query.where)) {\r\n                    this.processWhereArrayQry();\r\n                }\r\n                else {\r\n                    this.processWhere_();\r\n                }\r\n            }\r\n            else {\r\n                this.initTransaction_();\r\n                this.executeWhereUndefinedLogic();\r\n            }\r\n\r\n        }\r\n        catch (ex) {\r\n            this.errorOccured = true;\r\n            this.onExceptionOccured(ex, { TableName: this.query.from });\r\n        }\r\n    }\r\n\r\n    private processWhereArrayQry() {\r\n        const selectObject = new Select.Instance(this.query, (results) => {\r\n            const keyList = [];\r\n            const pkey = this.getPrimaryKey(this.query.from);\r\n            results.forEach((item) => {\r\n                keyList.push(item[pkey]);\r\n            });\r\n            results = null;\r\n            this.query.where = {};\r\n            this.query.where[pkey] = {};\r\n            this.query.where[pkey][QUERY_OPTION.In] = keyList;\r\n            this.processWhere_();\r\n        }, this.onError);\r\n        selectObject.execute();\r\n    }\r\n\r\n    private processWhere_() {\r\n        if (this.query.where.or) {\r\n            this.processOrLogic();\r\n        }\r\n        this.goToWhereLogic();\r\n    }\r\n\r\n    private initTransaction_() {\r\n        this.createTransaction([this.query.from], this.onTransactionCompleted_);\r\n        this.objectStore = this.transaction.objectStore(this.query.from);\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.rowAffected);\r\n        }\r\n    }\r\n\r\n    protected onQueryFinished() {\r\n        if (this.isOr === true) {\r\n            this.orQuerySuccess_();\r\n        }\r\n        else if (this.isTransaction === true) {\r\n            this.onTransactionCompleted_();\r\n        }\r\n    }\r\n\r\n    private orQuerySuccess_() {\r\n        const key = this.getObjectFirstKey((this as any)._orInfo.OrQuery);\r\n        if (key != null) {\r\n            const where = {};\r\n            where[key] = (this as any)._orInfo.OrQuery[key];\r\n            delete (this as any)._orInfo.OrQuery[key];\r\n            this.query.where = where;\r\n            this.goToWhereLogic();\r\n        }\r\n        else {\r\n            this.isOr = true;\r\n        }\r\n    }\r\n\r\n    private processOrLogic() {\r\n        this.isOr = true;\r\n        (this as any)._orInfo = {\r\n            OrQuery: this.query.where.or\r\n        };\r\n\r\n        // free or memory\r\n        delete this.query.where.or;\r\n    }\r\n}","import { Like } from \"./like\";\r\n\r\nexport class Where extends Like {\r\n    protected executeWhereLogic(column, value, op) {\r\n        let cursor: IDBCursorWithValue,\r\n            cursorRequest;\r\n        value = op ? value[op] : value;\r\n        cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\r\n        if (this.checkFlag) {\r\n            cursorRequest.onsuccess = (e) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.whereCheckerInstance.check(cursor.value)) {\r\n                        cursor.delete();\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    cursor.delete();\r\n                    ++this.rowAffected;\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}\r\n","import { In } from \"./in\";\r\nimport { OCCURENCE } from \"../../enums\";\r\n\r\nexport class Like extends In {\r\n\r\n    protected executeLikeLogic(column, value, symbol: OCCURENCE) {\r\n        let cursor: IDBCursorWithValue;\r\n        this.compValue = (value as string).toLowerCase();\r\n        this.compValueLength = this.compValue.length;\r\n        this.compSymbol = symbol;\r\n        const cursorRequest = this.objectStore.index(column).openCursor();\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n\r\n        if (this.checkFlag) {\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        cursor.delete();\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            cursorRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        cursor.delete();\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}","import { NotWhere } from \"./not_where\";\r\n\r\nexport class In extends NotWhere {\r\n    private executeInLogic(column, values) {\r\n        let cursor: IDBCursorWithValue, cursorRequest;\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = this.objectStore.index(column).\r\n                        openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                cursor.delete();\r\n                                ++this.rowAffected;\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = this.onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = this.objectStore.index(column).\r\n                        openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            cursor.delete();\r\n                            ++this.rowAffected;\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = this.onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { BaseRemove } from \"./base_remove\";\r\n\r\nexport class NotWhere extends BaseRemove {\r\n    protected executeWhereUndefinedLogic() {\r\n        let cursor;\r\n        const cursorRequest = this.objectStore.openCursor();\r\n        cursorRequest.onsuccess = (e: any) => {\r\n            cursor = e.target.result;\r\n            if (cursor) {\r\n                cursor.delete();\r\n                ++this.rowAffected;\r\n                (cursor as any).continue();\r\n            }\r\n            else {\r\n                this.onQueryFinished();\r\n            }\r\n        };\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}\r\n","import { Base } from \"../base\";\r\nimport { IRemove } from \"../../interfaces\";\r\n\r\nexport class BaseRemove extends Base {\r\n   \r\n    isOr: boolean;\r\n    query: IRemove;\r\n\r\n    protected onQueryFinished() {\r\n        // ff\r\n    }\r\n}\r\n","export * from './instance';","import { Where } from \"./where\";\r\nimport { IUpdate, IError, ISelect } from \"../../interfaces\";\r\nimport * as Select from \"../select/index\";\r\nimport { SchemaChecker } from \"./schema_checker\";\r\nimport { QUERY_OPTION } from \"../../enums\";\r\n\r\nexport class Instance extends Where {\r\n  \r\n    constructor(query: IUpdate, onSuccess: () => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n        this.query = query;\r\n    }\r\n\r\n    execute() {\r\n        try {\r\n            this.error = new SchemaChecker(this.getTable(this.query.in)).\r\n                check(this.query.set, this.query.in);\r\n            if (!this.error) {\r\n                if (this.query.where !== undefined) {\r\n                    this.addGreatAndLessToNotOp();\r\n                    if (this.query.where.or || Array.isArray(this.query.where)) {\r\n                        this.executeComplexLogic_();\r\n                    }\r\n                    else {\r\n                        this.initTransaction();\r\n                        this.goToWhereLogic();\r\n                    }\r\n                }\r\n                else {\r\n                    this.initTransaction();\r\n                    this.executeWhereUndefinedLogic();\r\n                }\r\n            }\r\n            else {\r\n                this.errorOccured = true;\r\n                this.onErrorOccured(this.error, true);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.errorOccured = true;\r\n            this.onExceptionOccured.call(this, ex, { TableName: this.query.in });\r\n        }\r\n    }\r\n\r\n    private executeComplexLogic_() {\r\n        const selectObject = new Select.Instance({\r\n            from: this.query.in,\r\n            where: this.query.where\r\n        } as ISelect, (results: any[]) => {\r\n            const key = this.getPrimaryKey(this.query.in),\r\n                inQuery = [],\r\n                whereQry = {};\r\n            results.forEach((value) => {\r\n                inQuery.push(value[key]);\r\n            });\r\n            results = null;\r\n            whereQry[key] = { [QUERY_OPTION.In]: inQuery };\r\n            this.query[QUERY_OPTION.Where] = whereQry;\r\n            this.initTransaction();\r\n            this.goToWhereLogic();\r\n        }, this.onError);\r\n        selectObject.execute();\r\n    }\r\n}\r\n","import { updateValue } from \"./base_update\";\r\nimport { Like } from \"./like\";\r\n\r\nexport class Where extends Like {\r\n    protected executeWhereLogic(column, value, op) {\r\n        let cursor: IDBCursorWithValue,\r\n            cursorRequest;\r\n        value = op ? value[op] : value;\r\n        cursorRequest = this.objectStore.index(column).openCursor(this.getKeyRange(value, op));\r\n        if (this.checkFlag) {\r\n            cursorRequest.onsuccess = (e) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.whereCheckerInstance.check(cursor.value)) {\r\n                        cursor.update(updateValue(this.query.set, cursor.value));\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            cursorRequest.onsuccess = (e) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    cursor.update(updateValue(this.query.set, cursor.value));\r\n                    ++this.rowAffected;\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}","import { Base } from \"../base\";\r\nimport { IUpdate } from \"../../interfaces\";\r\nimport { DATA_TYPE } from \"../../enums\";\r\n\r\nexport const updateValue = (suppliedValue, storedValue) => {\r\n    for (const key in suppliedValue) {\r\n        if (typeof suppliedValue[key] !== DATA_TYPE.Object) {\r\n            storedValue[key] = suppliedValue[key];\r\n        }\r\n        else {\r\n            for (const op in suppliedValue[key]) {\r\n                switch (op as any) {\r\n                    case '+': storedValue[key] += suppliedValue[key][op]; break;\r\n                    case '-': storedValue[key] -= suppliedValue[key][op]; break;\r\n                    case '*': storedValue[key] *= suppliedValue[key][op]; break;\r\n                    case '/': storedValue[key] /= suppliedValue[key][op]; break;\r\n                    default: storedValue[key] = suppliedValue[key];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return storedValue;\r\n};\r\n\r\nexport class BaseUpdate extends Base {\r\n    query: IUpdate;\r\n    protected initTransaction() {\r\n        this.createTransaction([this.query.in], this.onTransactionCompleted_);\r\n        this.objectStore = this.transaction.objectStore(this.query.in);\r\n    }\r\n\r\n    protected onQueryFinished() {\r\n        if (this.isTransaction === true) {\r\n            this.onTransactionCompleted_();\r\n        }\r\n    }\r\n\r\n    private onTransactionCompleted_ = () => {\r\n        if (this.errorOccured === false) {\r\n            this.onSuccess(this.rowAffected);\r\n        }\r\n    }\r\n}\r\n","import { OCCURENCE } from \"../../enums\";\r\nimport { In } from \"./in\";\r\nimport { updateValue } from \"./base_update\";\r\n\r\nexport class Like extends In {\r\n    protected executeLikeLogic(column, value, symbol: OCCURENCE) {\r\n        let cursor: IDBCursorWithValue;\r\n        this.compValue = (value as string).toLowerCase();\r\n        this.compValueLength = this.compValue.length;\r\n        this.compSymbol = symbol;\r\n        const cursorOpenRequest = this.objectStore.index(column).openCursor();\r\n        cursorOpenRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n\r\n        if (this.checkFlag) {\r\n            cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key) &&\r\n                        this.whereCheckerInstance.check(cursor.value)) {\r\n                        cursor.update(updateValue(this.query.set, cursor.value));\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n\r\n            };\r\n        }\r\n        else {\r\n            cursorOpenRequest.onsuccess = (e: any) => {\r\n                cursor = e.target.result;\r\n                if (cursor) {\r\n                    if (this.filterOnOccurence(cursor.key)) {\r\n                        cursor.update(updateValue(this.query.set, cursor.value));\r\n                        ++this.rowAffected;\r\n                    }\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    this.onQueryFinished();\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n","import { NotWhere } from \"./not_where\";\r\nimport { updateValue } from \"./base_update\";\r\n\r\nexport class In extends NotWhere {\r\n    private executeInLogic(column, values) {\r\n        let cursor: IDBCursorWithValue;\r\n        const columnStore = this.objectStore.index(column);\r\n        let cursorRequest;\r\n        const onCursorError = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n        if (this.checkFlag) {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            if (this.whereCheckerInstance.check(cursor.value)) {\r\n                                cursor.update(updateValue(this.query.set, cursor.value));\r\n                                ++this.rowAffected;\r\n                            }\r\n                            cursor.continue();\r\n                        }\r\n                        else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0, length = values.length; i < length; i++) {\r\n                if (!this.errorOccured) {\r\n                    cursorRequest = columnStore.openCursor(IDBKeyRange.only(values[i]));\r\n                    cursorRequest.onsuccess = (e) => {\r\n                        cursor = e.target.result;\r\n                        if (cursor) {\r\n                            cursor.update(updateValue(this.query.set, cursor.value));\r\n                            ++this.rowAffected;\r\n                            cursor.continue();\r\n                        } else if (i + 1 === length) {\r\n                            this.onQueryFinished();\r\n                        }\r\n                    };\r\n                    cursorRequest.onerror = onCursorError;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { BaseUpdate, updateValue } from \"./base_update\";\r\n\r\nexport class NotWhere extends BaseUpdate {\r\n\r\n    protected executeWhereUndefinedLogic() {\r\n        let cursor;\r\n        const cursorRequest = this.objectStore.openCursor();\r\n        cursorRequest.onsuccess = (e) => {\r\n            cursor = (e as any).target.result;\r\n            if (cursor) {\r\n                cursor.update(updateValue(this.query.set, cursor.value));\r\n                ++this.rowAffected;\r\n                (cursor as any).continue();\r\n            }\r\n            else {\r\n                this.onQueryFinished();\r\n            }\r\n\r\n        };\r\n        cursorRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}\r\n","import { Table } from \"../../model/table\";\r\nimport { IError, IColumn } from \"../../interfaces\";\r\nimport { Column } from \"../../model/column\";\r\nimport { LogHelper } from \"../../log_helper\";\r\nimport { ERROR_TYPE, DATA_TYPE } from \"../../enums\";\r\nimport { Util } from \"../../util\";\r\n\r\nexport class SchemaChecker {\r\n    table: Table;\r\n    constructor(table: Table) {\r\n        this.table = table;\r\n    }\r\n\r\n    check(setValue: object, tblName: string) {\r\n        let error: IError = null;\r\n        if (typeof setValue === DATA_TYPE.Object) {\r\n            if (this.table) {\r\n                // loop through table column and find data is valid\r\n                this.table.columns.every((column: Column) => {\r\n                    if (error === null) {\r\n                        if (column.name in setValue) {\r\n                            error = this.checkByColumn_(column, setValue[column.name]);\r\n                        }\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                error = new LogHelper(ERROR_TYPE.TableNotExist, { TableName: tblName });\r\n            }\r\n        }\r\n        else {\r\n            error = new LogHelper(ERROR_TYPE.NotObject);\r\n        }\r\n        return error;\r\n    }\r\n\r\n    private isNull_(value) {\r\n        return Util.isNull(value);\r\n    }\r\n\r\n    private getType_(value) {\r\n        return Util.getType(value);\r\n    }\r\n\r\n    private checkByColumn_(column: IColumn, value) {\r\n        let error: IError = null;\r\n        // check not null schema\r\n        if (column.notNull && this.isNull_(value)) {\r\n            error = new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });\r\n        }\r\n\r\n        // check datatype\r\n        const type = this.getType_(value);\r\n        if (column.dataType) {\r\n            if (type !== column.dataType && type !== 'object') {\r\n                error = new LogHelper(ERROR_TYPE.BadDataType, { ColumnName: column.name });\r\n            }\r\n        }\r\n\r\n        // check allowed operators\r\n        if (type === 'object') {\r\n            const allowedOp = ['+', '-', '*', '/'];\r\n            for (const prop of Object.keys(value)) {\r\n                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\r\n                    error = new LogHelper(ERROR_TYPE.BadDataType, { ColumnName: column.name });\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n}","import { Base } from \"./base\";\r\nimport { IError } from \"../interfaces\";\r\nimport { IdbHelper } from './idb_helper';\r\nimport { Column } from \"../model/column\";\r\nimport * as KeyStore from \"../keystore/index\";\r\n\r\nexport class Clear extends Base {\r\n    constructor(tableName: string, onSuccess: () => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.query = tableName;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n\r\n    execute() {\r\n        this.createTransaction([this.query], () => {\r\n            if (this.errorOccured === false) {\r\n                this.onSuccess();\r\n            }\r\n        });\r\n        const clearRequest: IDBRequest = this.transaction.objectStore(this.query).clear();\r\n        clearRequest.onsuccess = (e) => {\r\n            const currentTable = this.getTable(this.query);\r\n            currentTable.columns.forEach((column: Column) => {\r\n                if (column.autoIncrement) {\r\n                    KeyStore.set(`JsStore_${this.activeDb.name}_${this.query}_${column.name}_Value`, 0);\r\n                }\r\n            });\r\n        };\r\n\r\n        clearRequest.onerror = (e) => {\r\n            this.errorOccured = true;\r\n            this.onErrorOccured(e);\r\n        };\r\n    }\r\n}","import { Base } from \"./base\";\r\nimport { IInsert, IError } from \"../interfaces\";\r\nimport { ERROR_TYPE } from \"../enums\";\r\nimport { LogHelper } from \"../log_helper\";\r\nimport { IdbHelper } from './idb_helper';\r\n\r\nexport class BulkInsert extends Base {\r\n    query: IInsert;\r\n\r\n    constructor(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        super();\r\n        this.query = query;\r\n        this.onSuccess = onSuccess;\r\n        this.onError = onError;\r\n    }\r\n\r\n    execute() {\r\n        if (!Array.isArray(this.query.values)) {\r\n            this.onErrorOccured(\r\n                new LogHelper(ERROR_TYPE.NotArray),\r\n                true\r\n            );\r\n        }\r\n        else if (this.isTableExist(this.query.into) === true) {\r\n            try {\r\n                this.bulkinsertData(this.query.values);\r\n                this.query.values = null;\r\n            }\r\n            catch (ex) {\r\n                this.onExceptionOccured(ex, { TableName: this.query.into });\r\n            }\r\n        }\r\n        else {\r\n            const error = new LogHelper(ERROR_TYPE.TableNotExist, { TableName: this.query.into });\r\n            error.throw();\r\n        }\r\n    }\r\n\r\n    private bulkinsertData(values) {\r\n        this.createTransaction([this.query.into], () => {\r\n            this.onSuccess();\r\n        });\r\n        this.objectStore = this.transaction.objectStore(this.query.into);\r\n        for (let i = 0, length = values.length; i < length; i++) {\r\n            this.objectStore.add(values[i]);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}